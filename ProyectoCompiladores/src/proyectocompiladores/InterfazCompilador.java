package proyectocompiladores;

import comprobacionTipos.Simbolo;
import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import comprobacionTipos.TablaSimbolos;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author EliasGZ
 */
public class InterfazCompilador extends javax.swing.JFrame {

    int contadortipo = 0; // integer - 1 | float - 2 | boolean - 3| 
    int contadorid = 0;
    boolean banderai, banderaf, banderab = true;

    /**
     * Creates new form InterfazCompilador
     */
    public InterfazCompilador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_compilador = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jp_analizadorlexico = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtxtarea_salida = new javax.swing.JTextArea();
        jp_analizadorsintactico = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtxtarea_salida_sintactico = new javax.swing.JTextArea();
        jp_codigogenerado = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jd_tablaSimbolos = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jbt_analizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jb_arbol = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxtarea_entrada = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jb_tablaSimbolos = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        jd_compilador.setBackground(new java.awt.Color(0, 0, 51));

        jLabel2.setFont(new java.awt.Font("Eras Bold ITC", 2, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 102));
        jLabel2.setText("ADA 95");

        jTabbedPane2.setBackground(new java.awt.Color(0, 0, 51));

        jtxtarea_salida.setColumns(20);
        jtxtarea_salida.setRows(5);
        jScrollPane1.setViewportView(jtxtarea_salida);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jp_analizadorlexicoLayout = new javax.swing.GroupLayout(jp_analizadorlexico);
        jp_analizadorlexico.setLayout(jp_analizadorlexicoLayout);
        jp_analizadorlexicoLayout.setHorizontalGroup(
            jp_analizadorlexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jp_analizadorlexicoLayout.setVerticalGroup(
            jp_analizadorlexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Análisis Léxico", jp_analizadorlexico);

        jtxtarea_salida_sintactico.setColumns(20);
        jtxtarea_salida_sintactico.setRows(5);
        jScrollPane3.setViewportView(jtxtarea_salida_sintactico);

        javax.swing.GroupLayout jp_analizadorsintacticoLayout = new javax.swing.GroupLayout(jp_analizadorsintactico);
        jp_analizadorsintactico.setLayout(jp_analizadorsintacticoLayout);
        jp_analizadorsintacticoLayout.setHorizontalGroup(
            jp_analizadorsintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
        );
        jp_analizadorsintacticoLayout.setVerticalGroup(
            jp_analizadorsintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Análisis Sintáctico y Semántico", jp_analizadorsintactico);

        javax.swing.GroupLayout jp_codigogeneradoLayout = new javax.swing.GroupLayout(jp_codigogenerado);
        jp_codigogenerado.setLayout(jp_codigogeneradoLayout);
        jp_codigogeneradoLayout.setHorizontalGroup(
            jp_codigogeneradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
        jp_codigogeneradoLayout.setVerticalGroup(
            jp_codigogeneradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Generación de Código", jp_codigogenerado);

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 102));
        jLabel11.setText("Compilador ");

        jLabel13.setFont(new java.awt.Font("Eras Bold ITC", 2, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 102));
        jLabel13.setText("ADA 95");

        jLabel15.setFont(new java.awt.Font("Eras Bold ITC", 2, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 102));
        jLabel15.setText("ADA 95");

        javax.swing.GroupLayout jd_compiladorLayout = new javax.swing.GroupLayout(jd_compilador.getContentPane());
        jd_compilador.getContentPane().setLayout(jd_compiladorLayout);
        jd_compiladorLayout.setHorizontalGroup(
            jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_compiladorLayout.createSequentialGroup()
                .addGroup(jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_compiladorLayout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(jLabel2))
                    .addGroup(jd_compiladorLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jd_compiladorLayout.createSequentialGroup()
                    .addGap(44, 44, 44)
                    .addComponent(jLabel11)
                    .addContainerGap(470, Short.MAX_VALUE)))
            .addGroup(jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jd_compiladorLayout.createSequentialGroup()
                    .addGap(286, 286, 286)
                    .addComponent(jLabel13)
                    .addContainerGap(341, Short.MAX_VALUE)))
            .addGroup(jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_compiladorLayout.createSequentialGroup()
                    .addContainerGap(335, Short.MAX_VALUE)
                    .addComponent(jLabel15)
                    .addGap(292, 292, 292)))
        );
        jd_compiladorLayout.setVerticalGroup(
            jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_compiladorLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jd_compiladorLayout.createSequentialGroup()
                    .addGap(33, 33, 33)
                    .addComponent(jLabel11)
                    .addContainerGap(460, Short.MAX_VALUE)))
            .addGroup(jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jd_compiladorLayout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(jLabel13)
                    .addContainerGap(467, Short.MAX_VALUE)))
            .addGroup(jd_compiladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jd_compiladorLayout.createSequentialGroup()
                    .addGap(65, 65, 65)
                    .addComponent(jLabel15)
                    .addContainerGap(447, Short.MAX_VALUE)))
        );

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo", "tipoConstante", "tipoFunction", "Ambito", "Offset"
            }
        ));
        jScrollPane6.setViewportView(jTable);

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(173, 28, 28));
        jLabel14.setText("Tabla de Símbolos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 920, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(325, 325, 325)
                        .addComponent(jLabel14)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel14)
                .addGap(56, 56, 56)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jd_tablaSimbolosLayout = new javax.swing.GroupLayout(jd_tablaSimbolos.getContentPane());
        jd_tablaSimbolos.getContentPane().setLayout(jd_tablaSimbolosLayout);
        jd_tablaSimbolosLayout.setHorizontalGroup(
            jd_tablaSimbolosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jd_tablaSimbolosLayout.setVerticalGroup(
            jd_tablaSimbolosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));

        jbt_analizar.setText("||>");
        jbt_analizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_analizarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Eras Bold ITC", 2, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(173, 28, 28));
        jLabel1.setText("95");

        jButton1.setText("Limpiar ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jb_arbol.setText("Mostrar Árbol");
        jb_arbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_arbolActionPerformed(evt);
            }
        });

        jtxtarea_entrada.setColumns(20);
        jtxtarea_entrada.setRows(5);
        jScrollPane2.setViewportView(jtxtarea_entrada);

        jButton3.setText("Generar Jflex y Cup");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ADA");

        jLabel5.setFont(new java.awt.Font("Eras Bold ITC", 2, 48)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(173, 28, 28));
        jLabel5.setText("95");

        jLabel7.setFont(new java.awt.Font("Eras Bold ITC", 2, 48)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(173, 28, 28));
        jLabel7.setText("95");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(173, 28, 28));
        jLabel8.setText("95");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("ADA");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("ADA");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Daniel Rodríguez");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Elías Girón");

        jb_tablaSimbolos.setText("Tabla de Símbolos");
        jb_tablaSimbolos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_tablaSimbolosActionPerformed(evt);
            }
        });

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Mario Henríquez");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(76, 76, 76)
                        .addComponent(jButton1)
                        .addGap(33, 33, 33)
                        .addComponent(jb_arbol)
                        .addGap(46, 46, 46)
                        .addComponent(jButton3)
                        .addGap(103, 103, 103)
                        .addComponent(jbt_analizar)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jb_tablaSimbolos)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(124, 124, 124)
                    .addComponent(jLabel5)
                    .addContainerGap(854, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(144, 144, 144)
                    .addComponent(jLabel7)
                    .addContainerGap(834, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(144, 144, 144)
                    .addComponent(jLabel8)
                    .addContainerGap(856, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(jLabel6)
                    .addContainerGap(922, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(62, 62, 62)
                    .addComponent(jLabel10)
                    .addContainerGap(902, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel1)
                        .addComponent(jButton1)
                        .addComponent(jb_arbol)
                        .addComponent(jButton3)
                        .addComponent(jbt_analizar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jb_tablaSimbolos)))
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addComponent(jLabel5)
                    .addContainerGap(594, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(jLabel7)
                    .addContainerGap(574, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(jLabel8)
                    .addContainerGap(583, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addComponent(jLabel6)
                    .addContainerGap(596, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(58, 58, 58)
                    .addComponent(jLabel10)
                    .addContainerGap(576, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbt_analizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_analizarActionPerformed
        jd_compilador.pack();
        jd_compilador.setVisible(true);
        jd_compilador.setLocationRelativeTo(null);
        String result = AnalizarSintaxis();
        try {
            jtxtarea_salida.setText(Analizar());
            jtxtarea_salida_sintactico.setText(result);

        } catch (IOException ex) {
            Logger.getLogger(InterfazCompilador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbt_analizarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            String path = new File("").getAbsolutePath();
            String pathCup = new File("").getAbsolutePath();
            String pathSintax = new File("").getAbsolutePath();
            path = path.concat("/src/proyectocompiladores/LexerAda.flex");
            pathCup = pathCup.concat("/src/proyectocompiladores/AdaLexerCup.flex");
            pathSintax = pathSintax.concat("/src/proyectocompiladores/AdaSyntax.cup");
            String[] rutaS = {"-parser", "Sintax", pathSintax};
            generarCup(path, pathCup, rutaS);
        } catch (Exception ex) {
            Logger.getLogger(InterfazCompilador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jb_arbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_arbolActionPerformed
        try {
            graficar(sintactico.padre);
            File f1 = new File("image.png");
            Desktop dt = Desktop.getDesktop();
            dt.open(f1);
        } catch (Exception e) {
            System.out.println(e.getStackTrace());
        }

    }//GEN-LAST:event_jb_arbolActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jtxtarea_entrada.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jb_tablaSimbolosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_tablaSimbolosActionPerformed
        jd_tablaSimbolos.pack();
        jd_tablaSimbolos.setTitle("PROYECTO COMPILADORES");
        jd_tablaSimbolos.setVisible(true);
        jd_tablaSimbolos.setLocationRelativeTo(null);
        addRowtoJTabletds();
    }//GEN-LAST:event_jb_tablaSimbolosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazCompilador().setVisible(true);
            }
        });
//        try {
//            String ruta = "C:/Users/EliasGZ/Documents/Clases/Compiladores/Proyecto_Compiladores/ProyectoCompiladores/src/proyectocompiladores/LexerCup.flex";
//            String[] rutaCup = {"C:/Users/EliasGZ/Documents/Clases/Compiladores/Proyecto_Compiladores/ProyectoCompiladores/src/proyectocompiladores/AdaSyntax.cup"};
//            //generarCup(rutaCup);
//            generarJFlex(ruta);
//        } catch (Exception ex) {
//            Logger.getLogger(InterfazCompilador.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    public static void generarJFlex(String ruta) {
        File lexer = new File(ruta);
        jflex.Main.generate(lexer);
    }

    public static void generarCup(String path, String pathCup, String[] rutaCup) throws IOException, Exception {
        String absolutesym = new File("").getAbsolutePath();
        String absolutesin = new File("").getAbsolutePath();
        String absolute = new File("").getAbsolutePath();
        absolutesym = absolutesym.concat("/src/proyectocompiladores/sym.java");
        absolutesin = absolutesin.concat("/src/proyectocompiladores/Sintax.java");
        File file;
        file = new File(path);
        jflex.Main.generate(file);
        file = new File(pathCup);
        jflex.Main.generate(file);
        java_cup.Main.main(rutaCup);
        Path rutaSym = Paths.get(absolutesym);
        if (Files.exists(rutaSym)) {
            Files.delete(rutaSym);
        }
        String slash = (System.getProperty("os.name").equals("Mac OS X")
                || System.getProperty("os.name").equals("Linux")) ? "/" : "\\";

        Files.move(Paths.get(absolute + slash + "sym.java"),
                Paths.get(absolutesym));

        Path rutaSin = Paths.get(absolutesin);
        if (Files.exists(rutaSin)) {
            Files.delete(rutaSin);
        }
        Files.move(Paths.get(absolute + slash + "Sintax.java"),
                Paths.get(absolutesin));
    }

    public String Analizar() throws IOException {
        Reader reader;
        String text = "";
        reader = new BufferedReader(new StringReader(jtxtarea_entrada.getText()));
        Lexer lexer = new Lexer(reader);
        boolean bandera = true;
        boolean error = false;
        while (true) {
            Token token = lexer.yylex();
            if (token == null) {
                return text;
            }
            switch (token) {
                case ESPACIO:
                    if (bandera == true) {
                        text += "<" + token + ">\n";
                        bandera = false;
                    }
                    break;
                case ID:
                    text += "<" + token + ", " + lexer.yytext() + ">\n";
                    break;
                case TIPOVARIABLE:
                    text += "<" + token + ", " + lexer.yytext() + ">\n";
                    break;
                case ERROR:
                    JOptionPane.showMessageDialog(this, "Error léxico, intente de nuevo");
                default:
                    text += "<" + token + "> \n";
                    bandera = true;
            }
        }
    }

    public void addRowtoJTabletds() {
        jTable.removeAll();
        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
        model.setRowCount(0);
        ArrayList<Simbolo> list = SymbolTable.getTablaSimbolos();
        Object rowData[] = new Object[7];
        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).getNombre();
            rowData[1] = list.get(i).getTipoVariable();
            rowData[2] = list.get(i).getTipoConstante();
            rowData[3] = list.get(i).getIsFunction();
            rowData[4] = list.get(i).getAmbito();
            rowData[5] = "0";
            model.addRow(rowData);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JButton jb_arbol;
    private javax.swing.JButton jb_tablaSimbolos;
    private javax.swing.JButton jbt_analizar;
    private javax.swing.JDialog jd_compilador;
    private javax.swing.JDialog jd_tablaSimbolos;
    private javax.swing.JPanel jp_analizadorlexico;
    private javax.swing.JPanel jp_analizadorsintactico;
    private javax.swing.JPanel jp_codigogenerado;
    private javax.swing.JTextArea jtxtarea_entrada;
    private javax.swing.JTextArea jtxtarea_salida;
    private javax.swing.JTextArea jtxtarea_salida_sintactico;
    // End of variables declaration//GEN-END:variables
    AdaLexerCup lexico;
    Sintax sintactico;
    TablaSimbolos SymbolTable;
    boolean flagFuncionError;
    int handleReturn = 0;

    private String AnalizarSintaxis() {
        lexico = new AdaLexerCup(new BufferedReader(new StringReader(jtxtarea_entrada.getText())));
        String resultado = "";
        try {
            sintactico = new Sintax(lexico);
            sintactico.parse();
            SymbolTable.getErroresSemanticos().removeAll(SymbolTable.getErroresSemanticos());
            SymbolTable.getTablaSimbolos().removeAll(SymbolTable.getTablaSimbolos());
            recorrer(sintactico.padre.getHijos().get(0), sintactico.padre.getHijos().get(0).getValor());
            if (sintactico.errores.isEmpty() && SymbolTable.getErroresSemanticos().isEmpty()) {
                jb_arbol.setEnabled(true);
                jb_tablaSimbolos.setEnabled(true);
                resultado += "Compilado exitosamente";
                jtxtarea_salida_sintactico.setForeground(Color.GREEN);
            }
            if (!sintactico.errores.isEmpty()) {
                for (int i = 0; i < sintactico.errores.size(); i++) {
                    resultado += sintactico.errores.get(i) + "\n ";
                }

                jtxtarea_salida_sintactico.setForeground(Color.red);
                jb_arbol.setEnabled(false);
            }
            if (!SymbolTable.getErroresSemanticos().isEmpty()) {
                for (int i = 0; i < SymbolTable.getErroresSemanticos().size(); i++) {
                    resultado += SymbolTable.getErroresSemanticos().get(i) + "\n";
                }
                jtxtarea_salida_sintactico.setForeground(Color.red);
                //jb_tablaSimbolos.setEnabled(false);
            }
        } catch (Exception e) {
        }
        return resultado;

    }

    public void graficar(Nodo raiz) {
        FileWriter archivo = null;
        PrintWriter pw = null;
        String cadena = graficarNodo(raiz);
        try {
            archivo = new FileWriter("arbol.dot");
            pw = new PrintWriter(archivo);
            pw.println("digraph G {node[shape=box, style=filled, color=blanchedalmond]; edge[color=chocolate3];rankdir=UD \n");
            pw.println(cadena);
            pw.println("\n}");
            archivo.close();
        } catch (Exception e) {
            System.out.println(e + " 1");
        }

        try {
            String cmd = "dot arbol.dot -Tpng -o image.png";
            Runtime.getRuntime().exec(cmd);
            System.out.println(Runtime.getRuntime().exec(cmd));
            System.out.println("SE GENEROOOOO LA IMAGGEN");
        } catch (IOException ioe) {
            System.out.println(ioe + " 2");
        }

    }

    public String graficarNodo(Nodo nodo) {
        String cadena = "";
        System.out.println("NNNNNODOOOO NOMBRE::::::::: " + nodo.getNombre());
        for (Nodo hijos : nodo.getHijos()) {
            cadena += "\"" + nodo.getNumNodo() + "_" + nodo.getNombre() + " -> " + nodo.getValor() + "\"->\"" + hijos.getNumNodo() + "_" + hijos.getNombre() + " -> " + hijos.getValor() + "\"\n";
            cadena += graficarNodo(hijos);
        }
        return cadena;
    }

    public void recorrer(Nodo padre, String ambito) { // Metodo de recorrido para agregar a tabla de simbolos y validar tipos en asignaciones
        //codigo para agregar variables de procedure
        for (Nodo hoja : padre.getHijos()) {
            if (!hoja.isVisitado()) {
                hoja.setVisitado(true);
                if (hoja.getNombre().equals("variables")) { // Caso de encontrar declaración de variables
                    String id = "", tipo = "", valor = "";
                    tipo = hoja.getHijos().get(1).getValor(); // El tipo siempre será la posicion sub 1 
                    if (hoja.getHijos().size() > 2 && hoja.getHijos().get(2).getNombre().equals("Asignacion")) { // if en caso de que exista una asignacion de un valor u operacion
                        //Este if valida si hay mas de 2 nodos y que el tercer nodo sea una asignacion de un valor
                        comprobarValor(hoja.getHijos().get(2), ambito, hoja.getHijos().get(1).getValor());// metodo que comprueba valor de asignación con sus tipos correspondientes
                        if (contadortipo == 0) {
                            if (hoja.getHijos().get(0).getNombre().equals("id")) {
                                id = hoja.getHijos().get(0).getValor();
                                SymbolTable.insertar2(id, tipo, valor, false, false, ambito);
                            } else if (hoja.getHijos().get(0).getNombre().equals(",")) {
                                recorrerRepeticion(hoja.getHijos().get(0), valor, hoja.getHijos().get(1).getValor(), ambito);
                            }
                        }
                        contadortipo = 0;
                        banderai = true;
                        banderaf = true;
                        banderab = true;
                    } else { // caso en que no tenga valor de asignación
                        if (hoja.getHijos().get(0).getNombre().equals("id")) {
                            id = hoja.getHijos().get(0).getValor();
                            SymbolTable.insertar2(id, tipo, valor, false, false, ambito);
                        } else if (hoja.getHijos().get(0).getNombre().equals(",")) {
                            recorrerRepeticion(hoja.getHijos().get(0), valor, hoja.getHijos().get(1).getValor(), ambito);
                        }
                    }
                    //String nombre, String tipoVariable, Object valor, Boolean tipoConstante, Boolean isFunction, String ambito
                }
                if (hoja.getNombre().equals("declaracion_funcion")) {
                    String tipo = agregarFuncion(hoja, "");
                    SymbolTable.insertar2(hoja.getHijos().get(0).getValor(), tipo.substring(0, tipo.length() - 1) + " -> "
                            + hoja.getHijos().get(2).getValor(), "", false, true, ambito);
                    recorrerDominio(hoja, hoja.getHijos().get(0).getValor(), ambito, hoja.getHijos().get(2).getValor());
                    recorrer(hoja, ambito + "." + hoja.getHijos().get(0).getValor());
                }
                if (hoja.getNombre().equals("Procedure")) {
                    //SymbolTable.insertar2(hoja.getValor(), "void -> void", "", false, false, ambito);
                    boolean existenParametros = false;
                    if (hoja.getHijos().get(0).getNombre().equals("parametros_funcion")) {
                        existenParametros = true;
                    }
                    String tipo = agregarProcedure(hoja, "", existenParametros);
                    SymbolTable.insertar2(hoja.getValor(), tipo.substring(0, tipo.length() - 1) + " -> " + "void", "", false, true, ambito);
                    recorrerDominio(hoja, hoja.getValor(), ambito, "void");
                    recorrer(hoja, ambito + "." + hoja.getValor());
                }
                if (hoja.getNombre().equals("Beg")) {
                    boolean retorno = false;
                    String tipoRetorno = "void";
                    if (padre.getNombre().equals("declaracion_funcion")) {
                        retorno = true;
                        tipoRetorno = padre.getHijos().get(2).getValor();
                    }
                    recorrerCuerpo(hoja.getHijos().get(1), ambito, retorno, tipoRetorno);//llamar un método para comprobar asignacion, se le envía el nodo nueva_linea
                    if (handleReturn == 0 && padre.getNombre().equals("declaracion_funcion")) {
                        SymbolTable.getErroresSemanticos().add("error, valor de retorno esperado para funcion "
                                + padre.getHijos().get(0).getValor());
                    }
                    handleReturn = 0;
                }
                recorrer(hoja, ambito);
            }
        }
    }

    public void recorrerCuerpo(Nodo padre, String ambito, boolean retorno, String tipoRetorno) {
        for (Nodo hoja : padre.getHijos()) {
            if (!hoja.isVisitado()) {
                hoja.setVisitado(true);
                if (hoja.getNombre().equals("asignar_valor")) {
                    String tipoAsignado = SymbolTable.buscarTipo(hoja.getHijos().get(0).getValor(), ambito);//tipo del id que se le está asignando algo
                    comprobarValor(hoja.getHijos().get(1), ambito, tipoAsignado);
                }
                if (hoja.getNombre().equals("for")) {
                    String ambitofor = ambito + "." + contadorid;
                    contadorid++;
                    SymbolTable.insertar2(hoja.getHijos().get(0).getValor(), "integer", "", false, false, ambitofor);
                    comprobarValor(hoja.getHijos().get(1), ambito, "integer");
                    comprobarValor(hoja.getHijos().get(2), ambito, "integer");
                }
                if (hoja.getNombre().equals("while")) {
                    System.out.println("Hay un while");
                }
                if (hoja.getNombre().equals("exit-when")) {
                    System.out.println("Hay un exit-when");
                }// NUEVO PUSH
                if (hoja.getNombre().equals("put")) {
                    if (hoja.getHijos().get(0).getHijos().get(0).getHijos().size() > 1) {
                        String tipoPut = comprobarValorMejorado(hoja.getHijos().get(0).getHijos().get(0), ambito, "");
                    } else {
                        if (hoja.getHijos().get(0).getHijos().get(0).getNombre().equals("id")) {
                            String idPut = SymbolTable.buscarTipo(hoja.getHijos().get(0).getHijos().get(0).getValor(), ambito);
                        }
                    }
                }
                if (hoja.getNombre().equals("get")) {
                    //System.out.println("Hay un get");
                    String encuentraId = SymbolTable.buscarTipo(hoja.getValor(), ambito);
                }
                if (hoja.getNombre().equals("llamado_funcion")) {
                    String tipoFuncion = SymbolTable.buscarTipo(hoja.getHijos().get(0).getValor(), ambito);
                    String tipoParam = comprobarLlamadoFuncion(hoja.getHijos().get(1), ambito, "");
                    System.out.println(tipoParam);
                    tipoFuncion = SymbolTable.buscarDominio(tipoFuncion);
                    if (!tipoFuncion.equals(tipoParam) || flagFuncionError == true) {
                        SymbolTable.getErroresSemanticos().add("error, llamado de función inválido");
                    }
                }
                if (hoja.getNombre().equals("if-then")) {
                    System.out.println("Hay un if-then ");
                    Booleanos(hoja.getHijos().get(0), ambito);
                    System.out.println("sale if-then");
                }
                if (hoja.getNombre().equals("return")) {
                    handleReturn++;
                    if (retorno) {
                        String tipoEncontrado = "";
                        if (!padre.getHijos().get(1).getNombre().equals("boolean")) {
                            if (padre.getHijos().get(1).getHijos().get(0).getHijos().size() > 1) {
                                tipoEncontrado = comprobarValorMejorado(padre.getHijos().get(1).getHijos().get(0), ambito, "");
                                if (!tipoEncontrado.equals(tipoRetorno) || flagFuncionError) {
                                    SymbolTable.getErroresSemanticos().add("error, tipo de retorno esperado " + tipoRetorno + ", tipo de retorno encontrado " + tipoEncontrado);
                                }
                            } else {
                                String tipoId;
                                if (padre.getHijos().get(1).getHijos().get(0).getNombre().equals("id")) {
                                    tipoId = SymbolTable.buscarTipo(padre.getHijos().get(1).getHijos().get(0).getValor(), ambito);
                                } else {
                                    tipoId = convertirTipos(padre.getHijos().get(1).getHijos().get(0).getNombre());
                                }
                                if (!tipoId.equals(tipoRetorno)) {
                                    SymbolTable.getErroresSemanticos().add("error, tipo de retorno esperado "
                                            + tipoRetorno + ", tipo de retorno encontrado " + tipoId);
                                }
                            }
                        } else {
                            if (!tipoRetorno.equals("boolean")) {
                                SymbolTable.getErroresSemanticos().add("error, tipo esperado " + tipoRetorno + ", tipo encontrado boolean");
                            }
                        }
//                        if (padre.getHijos().get(1).getNombre().equals("id")) {
//                            String idTipo = SymbolTable.buscarTipo(hoja.getHijos().get(0).getValor(), ambito);
//                            if (!idTipo.equals(tipoRetorno)) {
//                                SymbolTable.getErroresSemanticos().add("error, retorno esperado " + tipoRetorno
//                                        + " valor encontrado " + idTipo);
//                            }
//                        } else {
//                            if (!convertirTipos(padre.getHijos().get(1).getNombre()).equals(tipoRetorno)) {
//                                SymbolTable.getErroresSemanticos().add("error, retorno esperado " + tipoRetorno + ", valor encontrado "
//                                        + convertirTipos(padre.getHijos().get(1).getNombre()));
//                            }
//                        }
                    } else {
                        SymbolTable.getErroresSemanticos().add("error, valor de retorno no esperado");
                    }
                }
                recorrerCuerpo(hoja, ambito, retorno, tipoRetorno);
            }
        }
    }

    public void Booleanos(Nodo padre, String ambito) {
        for (Nodo hoja : padre.getHijos()) {
            if (!hoja.isVisitado()) {
                hoja.setVisitado(true);
                if (hoja.getNombre().equals("and") || hoja.getNombre().equals("or")) {
                    Booleanos(hoja, ambito);
                } else {
                    String tipoEval=convertirTipos(hoja.getHijos().get(0).getNombre());
                    if(hoja.getHijos().get(0).getNombre().equals("id")){
                        tipoEval= SymbolTable.buscarTipo(hoja.getHijos().get(0).getValor(), ambito);
                    }
                    comprobarValorMejorado(hoja, ambito, tipoEval);
                }
            }
        }
    }

    public String comprobarValorMejorado(Nodo padre, String ambito, String tipo) {
        if ((padre.getHijos().get(0).getNombre().equals("num_int") || padre.getHijos().get(0).getNombre().equals("numfloat")
                || padre.getHijos().get(0).getNombre().equals("id"))
                && (padre.getHijos().get(1).getNombre().equals("num_int") || padre.getHijos().get(1).getNombre().equals("numfloat")
                || padre.getHijos().get(1).getNombre().equals("id"))) { //caso base, busca si ambos nodos son un número
            String tipo1, tipo2;
            System.out.println("entra caso base");
            if (padre.getHijos().get(0).getNombre().equals("id")) { // busca en caso de id
                tipo1 = SymbolTable.buscarTipo(padre.getHijos().get(0).getValor(), ambito);
            } else {
                tipo1 = convertirTipos(padre.getHijos().get(0).getNombre());
            }
            if (padre.getHijos().get(1).getNombre().equals("id")) { //busca en caso de id
                tipo2 = SymbolTable.buscarTipo(padre.getHijos().get(1).getValor(), ambito);
            } else {
                tipo2 = convertirTipos(padre.getHijos().get(1).getNombre());
            }
            if (tipo1.equals(tipo2) && (!tipo1.contains("error"))) { //evalúa que los tipos sean igual
                tipo = tipo1;
                flagFuncionError = false;
            } else {
                String error = padre.getHijos().get(0).getValor() + " posee un tipo diferente a " + padre.getHijos().get(1).getValor();//devuelve el tipo de error
                SymbolTable.getErroresSemanticos().add(error);//agrega error
                flagFuncionError = true; //flag para mostrar error de llamado de función al existir un error en operaciones
                tipo = tipo1;
            }
        }
        if (!(padre.getHijos().get(0).getNombre().equals("num_int") || padre.getHijos().get(0).getNombre().equals("numfloat")//si el de la izquierda no es un número
                || padre.getHijos().get(0).getNombre().equals("id"))
                && !(padre.getHijos().get(1).getNombre().equals("num_int") || padre.getHijos().get(1).getNombre().equals("numfloat")
                || padre.getHijos().get(1).getNombre().equals("id"))) {//y el de la derecha tampoco es un número 
            String tipo1 = convertirTipos(comprobarValorMejorado(padre.getHijos().get(0), ambito, ""));//busca los tipos
            String tipo2 = convertirTipos(comprobarValorMejorado(padre.getHijos().get(1), ambito, ""));
            if (tipo1.equals(tipo2) && (!tipo1.contains("error"))) { // evalúa si los tipos encontrados son iguales y no son error
                tipo = tipo1; //retorna tipo
                flagFuncionError = false; //flag para mostrar error de llamado de función al existir un error en operaciones
            } else {
                String error = tipo1 + " no se puede asignar a " + tipo2;
                SymbolTable.getErroresSemanticos().add(error);
                flagFuncionError = true; //flag para mostrar error de llamado de función al existir un error en operaciones
            }
        }
        if (!(padre.getHijos().get(0).getNombre().equals("num_int") || padre.getHijos().get(0).getNombre().equals("numfloat")
                || padre.getHijos().get(0).getNombre().equals("id")) //si el de la izquierda no es un número
                && (padre.getHijos().get(1).getNombre().equals("num_int") || padre.getHijos().get(1).getNombre().equals("numfloat")
                || padre.getHijos().get(1).getNombre().equals("id"))) {
            String tipo1 = comprobarValorMejorado(padre.getHijos().get(0), ambito, ""); //busca tipo del nodo izquierdo
            String tipo2 = "";
            if (padre.getHijos().get(1).getNombre().equals("id")) { //busca en caso de id
                tipo2 = SymbolTable.buscarTipo(padre.getHijos().get(1).getValor(), ambito);
            } else {
                tipo2 = convertirTipos(padre.getHijos().get(1).getNombre());
            }
            if (tipo1.equals(tipo2) && (!tipo1.contains("error"))) { // evalúa si son iguales
                tipo = tipo1;
                flagFuncionError = false;
            } else {
                String error = "error, mal uso de tipos";//devuelve error de tipos
                SymbolTable.getErroresSemanticos().add(error); // agrega a errores semánticos
                flagFuncionError = true; //flag para mostrar error de llamado de función al existir un error en operaciones
            }
        }
        if ((padre.getHijos().get(0).getNombre().equals("num_int") || padre.getHijos().get(0).getNombre().equals("numfloat")
                || padre.getHijos().get(0).getNombre().equals("id"))
                && !(padre.getHijos().get(1).getNombre().equals("num_int") || padre.getHijos().get(1).getNombre().equals("numfloat")
                || padre.getHijos().get(1).getNombre().equals("id"))) { //si no es un número
            String tipo2 = comprobarValorMejorado(padre.getHijos().get(1), ambito, "");//busca tipo
            String tipo1;
            if (padre.getHijos().get(0).getNombre().equals("id")) { // busca en caso de id
                tipo1 = SymbolTable.buscarTipo(padre.getHijos().get(0).getValor(), ambito);
            } else {
                tipo1 = convertirTipos(padre.getHijos().get(0).getNombre());
            }
            if (tipo2.equals(tipo1) && (!tipo1.contains("error"))) { //evalúa que sean iguales
                tipo = tipo2;
                flagFuncionError = false;
            } else {
                String error = "error, mal uso de tipos "; //devuelve error de tipos
                SymbolTable.getErroresSemanticos().add(error);
                flagFuncionError = true;//flag para mostrar error de llamado de función al existir un error en operaciones
            }
        }
        return tipo;
    }

    public String convertirTipos(String tipo) { //convierte num_int y numfloat a sus respectivos tipos
        String nuevo_tipo = "";
        switch (tipo) {
            case "num_int":
                nuevo_tipo = "integer";
                break;
            case "numfloat":
                nuevo_tipo = "float";
                break;
            default:
                nuevo_tipo = tipo;
                break;
        }
        return nuevo_tipo;
    }

    public void comprobarValor(Nodo valor, String ambito, String tipo) {
        //System.out.println("ESTA EN COMPROBAR ");
        for (Nodo hoja : valor.getHijos()) {
            if (!hoja.isVisitado()) {
                hoja.setVisitado(true);
                switch (hoja.getNombre()) {
                    case "num_int": //si es un id o uno de estos tipos
                        if (!tipo.equals("integer") && banderai) { //evalúa si no son tipos iguales
                            contadortipo++;
                            banderai = false;
                            SymbolTable.getErroresSemanticos().add("error, mal uso de tipos, integer no es igual a " + tipo);
                            //si no son tipos iguales, agrega al arreglo de errores semánticos
                        }
                        break;
                    case "numfloat":
                        if (!tipo.equals("float") && banderaf) {
                            contadortipo++;
                            banderaf = false;
                            SymbolTable.getErroresSemanticos().add("error, mal uso de tipos, float no es igual a " + tipo);
                        }
                        break;
                    case "boolean":
                        if (!tipo.equals("boolean") && banderab) {
                            contadortipo++;
                            banderab = false;
                            SymbolTable.getErroresSemanticos().add("error, mal uso de tipos, boolean no es igual a " + tipo);
                        }
                        break;
                    case "id":
                        String tipoId = SymbolTable.buscarTipo(hoja.getValor(), ambito);
                        switch (tipoId) {
                            case "integer":
                                if (!tipo.equals("integer")) {
                                    contadortipo++;
                                    SymbolTable.getErroresSemanticos().add("error, mal uso de tipos en variable " + hoja.getValor() + " no es igual a " + tipo);
                                }
                                break;
                            case "float":
                                if (!tipo.equals("float")) {
                                    contadortipo++;
                                    SymbolTable.getErroresSemanticos().add("error, mal uso de tipos en variable " + hoja.getValor() + " no es igual a " + tipo);
                                }
                                break;
                            case "boolean":
                                if (!tipo.equals("boolean")) {
                                    contadortipo++;
                                    SymbolTable.getErroresSemanticos().add("error, mal uso de tipos en variable " + hoja.getValor() + " no es igual a " + tipo);
                                }
                                break;
                        }
                        break;
                    default:
                        comprobarValor(hoja, ambito, tipo);
                        break;
                }
            }
        }

    }

    public String comprobarLlamadoFuncion(Nodo valor, String ambito, String tipo) {
        //System.out.println("entra llamadoFuncion");
        if (valor.getHijos().get(1).getNombre().equals(",")) { // recorre recursivamente si encuentra una coma
            switch (valor.getHijos().get(0).getHijos().get(0).getNombre()) {
                case "num_int":
                    tipo += convertirTipos("num_int") + "x";
                    break;
                case "numfloat":
                    tipo += convertirTipos("numfloat") + "x";
                    break;
                case "boolean":
                    tipo += "boolean" + "x";
                    break;
                case "id":
                    tipo += SymbolTable.buscarTipo(valor.getHijos().get(0).getHijos().get(0).getValor(), ambito) + "x";
                    break;
                default:
                    tipo += convertirTipos(comprobarValorMejorado(valor.getHijos().get(0).getHijos().get(0), ambito, "")) + "x";
            }
            return comprobarLlamadoFuncion(valor.getHijos().get(1), ambito, tipo);
        } else if (valor.getHijos().get(1).getNombre().equals("Asignacion")) {
            switch (valor.getHijos().get(0).getHijos().get(0).getNombre()) {
                case "num_int":
                    tipo += convertirTipos("num_int") + "x";
                    break;
                case "numfloat":
                    tipo += convertirTipos("numfloat") + "x";
                    break;
                case "boolean":
                    tipo += "boolean" + "x";
                    break;
                case "id":
                    tipo += SymbolTable.buscarTipo(valor.getHijos().get(0).getHijos().get(0).getValor(), ambito) + "x";
                    break;
                default:
                    tipo += convertirTipos(comprobarValorMejorado(valor.getHijos().get(0).getHijos().get(0), ambito, "")) + "x";
                //System.out.println("entra precedencia");
            }
            switch (valor.getHijos().get(1).getHijos().get(0).getNombre()) {
                case "num_int":
                    tipo += convertirTipos("num_int") + "x";
                    break;
                case "numfloat":
                    tipo += convertirTipos("numfloat") + "x";
                    break;
                case "boolean":
                    tipo += "boolean" + "x";
                    break;
                case "id":
                    tipo += SymbolTable.buscarTipo(valor.getHijos().get(1).getHijos().get(0).getValor(), ambito);
                    break;
                default:
                    tipo += comprobarValorMejorado(valor.getHijos().get(1).getHijos().get(0), ambito, "");
                //System.out.println("entró precedencia");
            }
        }
        return tipo.substring(0, tipo.length() - 1);
    }

    public void recorrerRepeticion(Nodo padre, String valor, String tipo, String ambito) {
        if (padre.getHijos().get(1).getNombre().equals(",")) {
            String rep_id;
            rep_id = padre.getHijos().get(0).getValor();
            SymbolTable.insertar2(rep_id, tipo, (Object) valor, false, false, ambito);
            recorrerRepeticion(padre.getHijos().get(1), valor, tipo, ambito);
        } else if (padre.getHijos().get(1).getNombre().equals("id")) {
            String rep_id;
            rep_id = padre.getHijos().get(0).getValor();
            SymbolTable.insertar2(rep_id, tipo, (Object) valor, false, false, ambito);
            //agregar a tabla de símbolos
            rep_id = padre.getHijos().get(1).getValor();
            SymbolTable.insertar2(rep_id, tipo, (Object) valor, false, false, ambito);
            //agregar a tabla de símbolos
        }
    }

    public void recorrerDominio(Nodo padre, String id, String ambito, String rango) {
        for (Nodo hoja : padre.getHijos()) {
            if (hoja.getNombre().equals("parametros_funcion")) {
                //tipo += hoja.getHijos().get(1).getValor() + "x";
                if (hoja.getHijos().get(0).getNombre().equals(",")) {
                    recorrerRepeticion(hoja.getHijos().get(0), "", hoja.getHijos().get(1).getValor(), ambito + "." + id); // tiene que recibir ambito como string
                } else if (hoja.getHijos().get(0).getNombre().equals("id")) {
                    //String nombre, String tipoVariable, Object valor, Boolean tipoConstante, Boolean isFunction, String ambito
                    SymbolTable.insertar2(hoja.getHijos().get(0).getValor(), hoja.getHijos().get(1).getValor(),
                            "", false, false, ambito + "." + id);
                }
                recorrerDominio(hoja, id, ambito, rango);
            }
//            if (hoja.getNombre().equals("declaracion_variables")) {
//                String idDeclaracion, tipoDeclaracion;
//                if (hoja.getHijos().get(0).getValor().equals(",")) {
//                    recorrerRepeticion(hoja.getHijos().get(0), "", hoja.getHijos().get(1).getValor(), ambito + "." + id);
//                } else {
//                    idDeclaracion = hoja.getHijos().get(0).getValor();
//                    tipoDeclaracion = hoja.getHijos().get(1).getValor();
//                    //hacemos comprobacion de tipos
//                    SymbolTable.insertar2(idDeclaracion, tipoDeclaracion,
//                            "", false, false, ambito + "." + id);
//                }
//
//                recorrerDominio(hoja, id, ambito, rango);
//            }
        }
        //SymbolTable.insertar2(id, tipo.substring(0, tipo.length() - 1) + " -> " + rango, "", false, true, ambito);
    }

    public String agregarFuncion(Nodo padre, String tipo) {
        for (Nodo hoja : padre.getHijos()) {
            if (hoja.getNombre().equals("parametros_funcion")) {
                if (hoja.getHijos().get(0).getNombre().equals(",")) {
                    int contador = contarTipoParametros(hoja.getHijos().get(0), 0);
                    for (int i = 0; i < contador; i++) {
                        tipo += hoja.getHijos().get(1).getValor() + "x";
                    }
                } else if (hoja.getHijos().get(0).getNombre().equals("id")) {
                    tipo += hoja.getHijos().get(1).getValor() + "x";
                }
                return agregarFuncion(hoja, tipo);
            }
        }
        //System.out.println("entra agrega funcion");
        //
        return tipo;
    }

    public String agregarProcedure(Nodo padre, String tipo, boolean existenParametros) {
        for (Nodo hoja : padre.getHijos()) {
            if (hoja.getNombre().equals("parametros_funcion")) {
                if (hoja.getHijos().get(0).getNombre().equals(",")) {
                    int contador = contarTipoParametros(hoja.getHijos().get(0), 0); // tiene que recibir ambito como string
                    for (int i = 1; i < contador; i++) {
                        tipo += hoja.getHijos().get(1).getValor() + "x";
                    }
                } else {
                    tipo += hoja.getHijos().get(1).getValor() + "x";
                }
                return agregarProcedure(hoja, tipo, existenParametros);
            }
            if (!existenParametros) {
                tipo = "void ";
            }
        }
        return tipo;
        //SymbolTable.insertar2(id, tipo.substring(0, tipo.length() - 1) + " -> " + "void", "", false, true, ambito);
    }

    public int contarTipoParametros(Nodo padre, int contador) {
        if (padre.getHijos().get(1).getNombre().equals(",")) {
            contador++;
            return contarTipoParametros(padre.getHijos().get(1), contador);
        } else if (padre.getHijos().get(1).getNombre().equals("id")) {
            contador++;
            contador++;
        }
        return contador;
    }
}
