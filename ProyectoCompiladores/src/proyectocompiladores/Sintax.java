
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 21 02:40:30 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 21 02:40:30 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\006\000\002\027" +
    "\003\000\002\027\003\000\002\022\003\000\002\022\002" +
    "\000\002\030\003\000\002\033\005\000\002\033\003\000" +
    "\002\031\005\000\002\031\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\005\000\002\021\005\000\002\021" +
    "\003\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\026\016\000\002\037\007\000\002\037\010\000" +
    "\002\037\002\000\002\003\007\000\002\003\010\000\002" +
    "\003\003\000\002\003\004\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\004\007\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\003\000\002\023\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\010\007" +
    "\000\002\010\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\007\000\002\011\007\000\002" +
    "\007\007\000\002\007\011\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\013\007\000\002\014\015" +
    "\000\002\015\011\000\002\016\006\000\002\016\005\000" +
    "\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\007\010\001\002\000\010\004\004\005\012\012" +
    "\014\001\002\000\006\002\uffe8\012\uffe8\001\002\000\006" +
    "\010\ufff2\042\224\001\002\000\004\010\211\001\002\000" +
    "\024\005\030\012\014\015\027\026\031\031\041\032\040" +
    "\035\025\036\023\045\026\001\002\000\004\012\014\001" +
    "\002\000\006\002\000\012\000\001\002\000\006\002\uffe7" +
    "\012\uffe7\001\002\000\032\005\030\012\014\014\uffd7\015" +
    "\027\023\uffd7\025\uffd7\026\031\031\041\032\040\035\025" +
    "\036\023\045\026\001\002\000\004\014\204\001\002\000" +
    "\010\014\uffda\023\uffda\025\uffda\001\002\000\014\005\127" +
    "\016\050\020\131\021\132\045\053\001\002\000\032\005" +
    "\030\012\014\014\uffd2\015\027\023\uffd2\025\uffd2\026\031" +
    "\031\041\032\040\035\025\036\023\045\026\001\002\000" +
    "\024\005\030\012\014\015\027\026\031\031\041\032\040" +
    "\035\025\036\023\045\026\001\002\000\010\005\054\016" +
    "\055\027\060\001\002\000\014\005\127\016\050\020\131" +
    "\021\132\045\053\001\002\000\004\041\120\001\002\000" +
    "\004\027\106\001\002\000\032\005\030\012\014\014\uffd1" +
    "\015\027\023\uffd1\025\uffd1\026\031\031\041\032\040\035" +
    "\025\036\023\045\026\001\002\000\032\005\030\012\014" +
    "\014\uffd5\015\027\023\uffd5\025\uffd5\026\031\031\041\032" +
    "\040\035\025\036\023\045\026\001\002\000\032\005\030" +
    "\012\014\014\uffd4\015\027\023\uffd4\025\uffd4\026\031\031" +
    "\041\032\040\035\025\036\023\045\026\001\002\000\032" +
    "\005\030\012\014\014\uffd3\015\027\023\uffd3\025\uffd3\026" +
    "\031\031\041\032\040\035\025\036\023\045\026\001\002" +
    "\000\032\005\030\012\014\014\uffd8\015\027\023\uffd8\025" +
    "\uffd8\026\031\031\041\032\040\035\025\036\023\045\026" +
    "\001\002\000\032\005\030\012\014\014\uffd6\015\027\023" +
    "\uffd6\025\uffd6\026\031\031\041\032\040\035\025\036\023" +
    "\045\026\001\002\000\004\005\046\001\002\000\004\027" +
    "\042\001\002\000\004\005\043\001\002\000\004\030\044" +
    "\001\002\000\004\006\045\001\002\000\032\005\uffbc\012" +
    "\uffbc\014\uffbc\015\uffbc\023\uffbc\025\uffbc\026\uffbc\031\uffbc" +
    "\032\uffbc\035\uffbc\036\uffbc\045\uffbc\001\002\000\004\033" +
    "\047\001\002\000\010\005\051\016\050\045\053\001\002" +
    "\000\010\017\uffcf\034\uffcf\035\uffcf\001\002\000\006\034" +
    "\uffce\035\uffce\001\002\000\004\034\071\001\002\000\010" +
    "\005\054\016\055\027\060\001\002\000\046\005\ufff5\006" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\017\ufff5\023\ufff5\025\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\032\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\001\002\000\046\005\ufff6" +
    "\006\ufff6\012\ufff6\014\ufff6\015\ufff6\017\ufff6\023\ufff6\025" +
    "\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\043\ufff6\044\ufff6\045\ufff6\001\002\000\046\005" +
    "\ufff9\006\ufff9\012\ufff9\014\ufff9\015\ufff9\017\ufff9\023\ufff9" +
    "\025\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\043\ufff9\044\065\045\ufff9\001\002\000\010" +
    "\017\uffcd\034\uffcd\035\uffcd\001\002\000\010\005\054\016" +
    "\055\027\060\001\002\000\046\005\ufff7\006\ufff7\012\ufff7" +
    "\014\ufff7\015\ufff7\017\ufff7\023\ufff7\025\ufff7\026\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\001\002\000\042\005\ufffb\006\ufffb\012" +
    "\ufffb\014\ufffb\015\ufffb\017\ufffb\023\ufffb\025\ufffb\026\ufffb" +
    "\031\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb\043\063\045" +
    "\ufffb\001\002\000\010\005\054\016\055\027\060\001\002" +
    "\000\046\005\ufffa\006\ufffa\012\ufffa\014\ufffa\015\ufffa\017" +
    "\ufffa\023\ufffa\025\ufffa\026\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\043\ufffa\044\065\045\ufffa\001" +
    "\002\000\010\005\054\016\055\027\060\001\002\000\046" +
    "\005\ufff8\006\ufff8\012\ufff8\014\ufff8\015\ufff8\017\ufff8\023" +
    "\ufff8\025\ufff8\026\ufff8\030\ufff8\031\ufff8\032\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\043\ufff8\044\ufff8\045\ufff8\001\002\000" +
    "\006\030\070\043\063\001\002\000\046\005\ufff4\006\ufff4" +
    "\012\ufff4\014\ufff4\015\ufff4\017\ufff4\023\ufff4\025\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\001\002\000\010\005\051\016" +
    "\050\045\053\001\002\000\004\035\073\001\002\000\024" +
    "\005\030\012\014\015\027\026\031\031\041\032\040\035" +
    "\025\036\023\045\026\001\002\000\004\014\075\001\002" +
    "\000\004\035\076\001\002\000\004\006\077\001\002\000" +
    "\032\005\uffbb\012\uffbb\014\uffbb\015\uffbb\023\uffbb\025\uffbb" +
    "\026\uffbb\031\uffbb\032\uffbb\035\uffbb\036\uffbb\045\uffbb\001" +
    "\002\000\010\014\uffe0\023\uffe0\025\uffe0\001\002\000\010" +
    "\014\uffe2\023\uffe2\025\uffe2\001\002\000\010\014\uffdf\023" +
    "\uffdf\025\uffdf\001\002\000\010\014\uffdd\023\uffdd\025\uffdd" +
    "\001\002\000\010\014\uffde\023\uffde\025\uffde\001\002\000" +
    "\010\014\uffdc\023\uffdc\025\uffdc\001\002\000\010\005\107" +
    "\013\111\016\110\001\002\000\004\030\116\001\002\000" +
    "\004\030\114\001\002\000\004\030\112\001\002\000\004" +
    "\006\113\001\002\000\032\005\uffbf\012\uffbf\014\uffbf\015" +
    "\uffbf\023\uffbf\025\uffbf\026\uffbf\031\uffbf\032\uffbf\035\uffbf" +
    "\036\uffbf\045\uffbf\001\002\000\004\006\115\001\002\000" +
    "\032\005\uffbd\012\uffbd\014\uffbd\015\uffbd\023\uffbd\025\uffbd" +
    "\026\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd\045\uffbd\001" +
    "\002\000\004\006\117\001\002\000\032\005\uffbe\012\uffbe" +
    "\014\uffbe\015\uffbe\023\uffbe\025\uffbe\026\uffbe\031\uffbe\032" +
    "\uffbe\035\uffbe\036\uffbe\045\uffbe\001\002\000\014\005\054" +
    "\016\055\020\121\021\123\027\060\001\002\000\004\006" +
    "\126\001\002\000\004\006\125\001\002\000\004\006\124" +
    "\001\002\000\032\005\uffe5\012\uffe5\014\uffe5\015\uffe5\023" +
    "\uffe5\025\uffe5\026\uffe5\031\uffe5\032\uffe5\035\uffe5\036\uffe5" +
    "\045\uffe5\001\002\000\032\005\uffe4\012\uffe4\014\uffe4\015" +
    "\uffe4\023\uffe4\025\uffe4\026\uffe4\031\uffe4\032\uffe4\035\uffe4" +
    "\036\uffe4\045\uffe4\001\002\000\032\005\uffe6\012\uffe6\014" +
    "\uffe6\015\uffe6\023\uffe6\025\uffe6\026\uffe6\031\uffe6\032\uffe6" +
    "\035\uffe6\036\uffe6\045\uffe6\001\002\000\012\006\uffc6\017" +
    "\uffce\022\uffc6\035\uffc6\001\002\000\004\017\154\001\002" +
    "\000\010\006\uffc5\022\uffc5\035\uffc5\001\002\000\010\006" +
    "\uffc4\022\uffc4\035\uffc4\001\002\000\004\022\134\001\002" +
    "\000\024\005\030\012\014\015\027\026\031\031\041\032" +
    "\040\035\025\036\023\045\026\001\002\000\010\014\141" +
    "\023\140\025\136\001\002\000\024\005\030\012\014\015" +
    "\027\026\031\031\041\032\040\035\025\036\023\045\026" +
    "\001\002\000\032\005\uffc1\012\uffc1\014\uffc1\015\uffc1\023" +
    "\uffc1\025\uffc1\026\uffc1\031\uffc1\032\uffc1\035\uffc1\036\uffc1" +
    "\045\uffc1\001\002\000\014\005\127\016\050\020\131\021" +
    "\132\045\053\001\002\000\004\015\142\001\002\000\004" +
    "\006\143\001\002\000\032\005\uffc0\012\uffc0\014\uffc0\015" +
    "\uffc0\023\uffc0\025\uffc0\026\uffc0\031\uffc0\032\uffc0\035\uffc0" +
    "\036\uffc0\045\uffc0\001\002\000\004\022\145\001\002\000" +
    "\024\005\030\012\014\015\027\026\031\031\041\032\040" +
    "\035\025\036\023\045\026\001\002\000\006\023\140\025" +
    "\136\001\002\000\032\005\uffc3\012\uffc3\014\uffc3\015\uffc3" +
    "\023\uffc3\025\uffc3\026\uffc3\031\uffc3\032\uffc3\035\uffc3\036" +
    "\uffc3\045\uffc3\001\002\000\004\014\151\001\002\000\004" +
    "\015\152\001\002\000\004\006\153\001\002\000\032\005" +
    "\uffc2\012\uffc2\014\uffc2\015\uffc2\023\uffc2\025\uffc2\026\uffc2" +
    "\031\uffc2\032\uffc2\035\uffc2\036\uffc2\045\uffc2\001\002\000" +
    "\012\005\156\016\155\020\160\021\161\001\002\000\012" +
    "\006\uffca\022\uffca\024\uffca\035\uffca\001\002\000\012\006" +
    "\uffc9\022\uffc9\024\uffc9\035\uffc9\001\002\000\012\006\uffc7" +
    "\022\uffc7\024\162\035\uffc7\001\002\000\012\006\uffcc\022" +
    "\uffcc\024\uffcc\035\uffcc\001\002\000\012\006\uffcb\022\uffcb" +
    "\024\uffcb\035\uffcb\001\002\000\014\005\127\016\050\020" +
    "\131\021\132\045\053\001\002\000\010\006\uffc8\022\uffc8" +
    "\035\uffc8\001\002\000\032\005\030\012\014\014\uffd0\015" +
    "\027\023\uffd0\025\uffd0\026\031\031\041\032\040\035\025" +
    "\036\023\045\026\001\002\000\010\014\uffd9\023\uffd9\025" +
    "\uffd9\001\002\000\004\014\167\001\002\000\034\005\uffb8" +
    "\012\uffb8\014\uffb8\015\uffb8\023\uffb8\025\uffb8\026\uffb8\031" +
    "\uffb8\032\uffb8\035\uffb8\036\uffb8\037\171\045\uffb8\001\002" +
    "\000\032\005\uffb9\012\uffb9\014\uffb9\015\uffb9\023\uffb9\025" +
    "\uffb9\026\uffb9\031\uffb9\032\uffb9\035\uffb9\036\uffb9\045\uffb9" +
    "\001\002\000\004\040\172\001\002\000\014\005\127\016" +
    "\050\020\131\021\132\045\053\001\002\000\004\006\174" +
    "\001\002\000\032\005\uffb7\012\uffb7\014\uffb7\015\uffb7\023" +
    "\uffb7\025\uffb7\026\uffb7\031\uffb7\032\uffb7\035\uffb7\036\uffb7" +
    "\045\uffb7\001\002\000\010\014\uffdb\023\uffdb\025\uffdb\001" +
    "\002\000\004\035\177\001\002\000\024\005\030\012\014" +
    "\015\027\026\031\031\041\032\040\035\025\036\023\045" +
    "\026\001\002\000\004\014\201\001\002\000\004\035\202" +
    "\001\002\000\004\006\203\001\002\000\032\005\uffba\012" +
    "\uffba\014\uffba\015\uffba\023\uffba\025\uffba\026\uffba\031\uffba" +
    "\032\uffba\035\uffba\036\uffba\045\uffba\001\002\000\006\005" +
    "\205\006\ufffc\001\002\000\004\006\ufffd\001\002\000\004" +
    "\006\207\001\002\000\034\002\uffe3\005\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\023\uffe3\025\uffe3\026\uffe3\031\uffe3\032\uffe3" +
    "\035\uffe3\036\uffe3\045\uffe3\001\002\000\010\014\uffe1\023" +
    "\uffe1\025\uffe1\001\002\000\004\011\212\001\002\000\006" +
    "\006\213\041\214\001\002\000\010\004\004\005\012\012" +
    "\014\001\002\000\014\005\054\016\055\020\220\021\222" +
    "\027\060\001\002\000\004\006\216\001\002\000\010\004" +
    "\004\005\012\012\014\001\002\000\006\002\uffe9\012\uffe9" +
    "\001\002\000\004\006\ufff0\001\002\000\004\006\ufff1\001" +
    "\002\000\004\006\uffef\001\002\000\006\002\uffea\012\uffea" +
    "\001\002\000\004\005\012\001\002\000\004\010\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\014\003\015\004\010\021\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\031" +
    "\007\034\012\032\013\033\014\035\015\017\016\036\020" +
    "\023\023\020\024\021\001\001\000\004\004\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\031\007" +
    "\034\012\032\013\033\014\035\015\017\016\036\020\023" +
    "\023\207\024\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\127\010\175\001\001\000\026\004\031" +
    "\007\034\012\032\013\033\014\035\015\017\016\036\020" +
    "\023\023\174\024\021\001\001\000\026\004\031\007\034" +
    "\012\032\013\033\014\035\015\017\016\036\020\023\023" +
    "\165\024\021\001\001\000\012\030\163\031\055\032\060" +
    "\033\061\001\001\000\006\005\127\010\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\031\007\034" +
    "\012\032\013\033\014\035\015\017\016\036\020\023\023" +
    "\104\024\021\001\001\000\026\004\031\007\034\012\032" +
    "\013\033\014\035\015\017\016\036\020\023\023\103\024" +
    "\021\001\001\000\026\004\031\007\034\012\032\013\033" +
    "\014\035\015\017\016\036\020\023\023\102\024\021\001" +
    "\001\000\026\004\031\007\034\012\032\013\033\014\035" +
    "\015\017\016\036\020\023\023\101\024\021\001\001\000" +
    "\026\004\031\007\034\012\032\013\033\014\035\015\017" +
    "\016\036\020\023\023\100\024\021\001\001\000\026\004" +
    "\031\007\034\012\032\013\033\014\035\015\017\016\036" +
    "\020\023\023\077\024\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\056\031\055\032\060\033\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\055\032\060\033\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\063" +
    "\032\060\001\001\000\002\001\001\000\004\032\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\071\001\001\000\002\001\001\000\026\004" +
    "\031\007\034\012\032\013\033\014\035\015\017\016\036" +
    "\020\023\023\073\024\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\121\031\055\032\060\033\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\031\007\034\012\032\013\033\014\035" +
    "\015\017\016\036\020\023\023\134\024\021\001\001\000" +
    "\004\011\136\001\001\000\026\004\031\007\034\012\032" +
    "\013\033\014\035\015\017\016\036\020\023\023\147\024" +
    "\021\001\001\000\002\001\001\000\006\005\127\010\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\031\007\034\012\032" +
    "\013\033\014\035\015\017\016\036\020\023\023\145\024" +
    "\021\001\001\000\004\011\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\127\010\162\001\001\000\002" +
    "\001\001\000\026\004\031\007\034\012\032\013\033\014" +
    "\035\015\017\016\036\020\023\023\164\024\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\127" +
    "\010\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\031\007\034" +
    "\012\032\013\033\014\035\015\017\016\036\020\023\023" +
    "\177\024\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\214\001" +
    "\001\000\012\002\014\003\222\004\010\021\012\001\001" +
    "\000\012\030\220\031\055\032\060\033\061\001\001\000" +
    "\002\001\001\000\012\002\014\003\216\004\010\021\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\224" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<String> errores = new ArrayList();
    public void unrecovered_syntax_error(Symbol s) {
        errores.add("Error de sintaxis en el codigo. Revise el codigo. No recuperable.");
        System.err.println("Error de sintaxis en el codigo. Revise el codigo.");
        System.out.println(s.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exit_when ::= EXIT WHEN condicion_if SEMICOLON 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicion_loopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicion_loopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion_loop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exit_when",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // loop_func ::= LOOP cuerpo END 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(lp.toString() + e.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("loop_func",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loop_func ::= LOOP cuerpo END exit_when 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
System.out.println(lp.toString() + e.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("loop_func",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // while_loop ::= WHILE condicion_if LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cond_whileleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cond_whileright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object cond_while = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(wh.toString() + lp.toString() + e.toString() + lp1.toString() + semi.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("while_loop",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // for_loop ::= FOR ID IN operando1 DOSPUNTOS operando1 LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int puntosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int puntosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object puntos = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(f.toString() + id.toString() + puntos.toString() + lp1.toString() + e.toString() + lp2.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // get_function ::= GET PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(g.toString() + par_izquierdo.toString() + id.toString() +  par_derecho.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get_function",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // put_function ::= PUT PARIZQ NUMERO PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(p.toString() + par_izquierdo.toString() + num.toString() + par_derecho.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // put_function ::= PUT PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(p.toString() + par_izquierdo.toString() + id.toString() + par_derecho.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // put_function ::= PUT PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(p.toString() + par_izquierdo.toString() + cadena.toString() +  par_derecho.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque_if ::= IF condicion_if THEN cuerpo END IF SEMICOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int end_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int end_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int if1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object if1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(i.toString() + then.toString() + end_if.toString() + if1.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_if ::= IF condicion_if THEN cuerpo elseif_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int el_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int el_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object el_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(i.toString() + then.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // elseif_else ::= ELSE cuerpo END IF SEMICOLON 
            {
              Object RESULT =null;
		int else1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object else1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int end_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int end_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int if2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int if2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object if2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(else1.toString() + end_if.toString() + if2.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elseif_else",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // elseif_else ::= ELSIF condicion_if THEN cuerpo elseif_else 
            {
              Object RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cond_elifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cond_elifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object cond_elif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int elif_elseleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elif_elseright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elif_else = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(elif.toString() + then.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elseif_else",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion_if ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion_if ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicion_if ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion_if ::= operando1 OPREL operando2 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(oprel.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion_if ::= operando1 OPREL operando2 CONDICIONALES condicion_if 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicional = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int condIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(oprel.toString() + condicional.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operando2 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operando2 ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(num.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operando2 ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(f.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operando2 ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(t.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operando1 ::= RETURN S 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operando1 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operando1 ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(num.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fin_cuerpo ::= RETURN S 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fin_cuerpo ::= BEG 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al último begin");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fin_cuerpo ::= asignar_valor 
            {
              Object RESULT =null;
		int asignarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int asignarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object asignar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fin_cuerpo ::= bloque_if 
            {
              Object RESULT =null;
		int bloqueIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bloqueIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bloqueIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fin_cuerpo ::= get_function 
            {
              Object RESULT =null;
		int getFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int getFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object getFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fin_cuerpo ::= put_function 
            {
              Object RESULT =null;
		int putFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int putFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object putFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fin_cuerpo ::= loop_func 
            {
              Object RESULT =null;
		int loopFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int loopFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object loopFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fin_cuerpo ::= while_loop 
            {
              Object RESULT =null;
		int whileLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int whileLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object whileLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fin_cuerpo ::= for_loop 
            {
              Object RESULT =null;
		int forLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int forLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object forLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra a fin cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= RETURN S cuerpo 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= fin_cuerpo 
            {
              Object RESULT =null;
		int fcuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fcuerporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fcuerpo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= asignar_valor cuerpo 
            {
              Object RESULT =null;
		int asignarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo ::= BEG cuerpo 
            {
              Object RESULT =null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object begin = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo ::= get_function cuerpo 
            {
              Object RESULT =null;
		int getFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int getFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object getFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo ::= put_function cuerpo 
            {
              Object RESULT =null;
		int putFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int putFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object putFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cuerpo ::= bloque_if cuerpo 
            {
              Object RESULT =null;
		int bloqueIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bloqueIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bloqueIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cuerpo ::= loop_func cuerpo 
            {
              Object RESULT =null;
		int loopFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int loopFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object loopFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cuerpo ::= while_loop cuerpo 
            {
              Object RESULT =null;
		int whileLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int whileLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object whileLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cuerpo ::= for_loop cuerpo 
            {
              Object RESULT =null;
		int forLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int forLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object forLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Entra al cuerpo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BEG ::= BEGIN cuerpo END end_id SEMICOLON 
            {
              Object RESULT =null;
		int bgnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bgnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bgn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int endIdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int endIdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object endId = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(bgn.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEG",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignar_valor ::= ID ASIGNACION S SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignar_valor ::= ID ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString() + asignacion.toString() + f.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignar_valor ::= ID ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString() + asignacion.toString() + t.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Variables ::= Inicio BEG 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
//System.out.println(in.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Variables ::= BEG 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("inicializa");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(tipo.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros_funcion ::= 
            {
              Object RESULT =null;
		

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= FUNCTION ID PARIZQ parametros_funcion PARDER RETURN TIPOVARIABLE IS parametros_funcion BEG RETURN S 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int param_functleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int param_functright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object param_funct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int pmfuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pmfuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object pmfuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignar_valor_variables ::= ASIGNACION FALSE 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(asignacion.toString() + f.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asignar_valor_variables ::= ASIGNACION TRUE 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(asignacion.toString() + t.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignar_valor_variables ::= ASIGNACION S 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(asignacion.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // repeticion_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_id",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // repeticion_id ::= ID COMA repeticion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString() + coma.toString() + "2. declaracion_id");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_id",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // F ::= PARIZQ E PARDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // F ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // F ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // T ::= F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // T ::= T OPMULTIPLICACION F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= E OPSUMA T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= E 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // end_id ::= 
            {
              Object RESULT =null;
		
System.out.println("Vaciooo");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("end_id",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("end_id",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_o_id ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_o_id",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_o_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_o_id",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= PROCEDURE ID IS Variables 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString()+"1: Procedure");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

