
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 27 18:52:10 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 27 18:52:10 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\312\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\007\000\002\002\006\000\002\002\007" +
    "\000\002\002\007\000\002\002\006\000\002\002\007\000" +
    "\002\002\006\000\002\002\006\000\002\021\003\000\002" +
    "\021\002\000\002\026\003\000\002\031\005\000\002\031" +
    "\003\000\002\027\005\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\020\005\000\002\020" +
    "\003\000\002\020\005\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\025\012\000" +
    "\002\025\012\000\002\025\012\000\002\025\012\000\002" +
    "\025\012\000\002\025\012\000\002\025\012\000\002\025" +
    "\012\000\002\034\007\000\002\034\005\000\002\034\005" +
    "\000\002\034\007\000\002\034\010\000\002\034\006\000" +
    "\002\034\005\000\002\032\007\000\002\032\010\000\002" +
    "\032\007\000\002\032\006\000\002\032\007\000\002\032" +
    "\007\000\002\032\007\000\002\032\006\000\002\032\006" +
    "\000\002\032\006\000\002\032\010\000\002\032\010\000" +
    "\002\032\010\000\002\032\007\000\002\032\007\000\002" +
    "\032\007\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\010\000\002\003\010" +
    "\000\002\003\010\000\002\003\010\000\002\003\006\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\007\000\002\003\005\000\002" +
    "\003\007\000\002\003\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\005\000\002\017\004\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\004\007\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\005\000\002\022\005\000\002\022\004\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\004\000\002\023\004\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\007\007\000\002\007\005\000\002\007" +
    "\005\000\002\007\007\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\007\000" +
    "\002\010\007\000\002\006\007\000\002\006\007\000\002" +
    "\006\011\000\002\011\007\000\002\011\007\000\002\011" +
    "\007\000\002\011\007\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\007\000\002\011\007\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\011" +
    "\007\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\036\005\000\002\036\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\012\007\000\002\013\015" +
    "\000\002\013\015\000\002\013\015\000\002\013\015\000" +
    "\002\013\015\000\002\013\015\000\002\013\015\000\002" +
    "\013\015\000\002\014\011\000\002\014\011\000\002\015" +
    "\007\000\002\015\007\000\002\016\006\000\002\016\006" +
    "\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d2\000\006\003\005\004\004\001\002\000\006\003" +
    "\u01c8\005\u01c7\001\002\000\006\004\011\005\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\007\u01c3\001\002\000\004\005\012\001\002\000\004" +
    "\007\013\001\002\000\014\002\ufff8\003\017\004\016\005" +
    "\014\046\021\001\002\000\012\003\u01bd\010\uffe5\011\uffe5" +
    "\042\073\001\002\000\006\010\u01a5\011\u01a6\001\002\000" +
    "\006\003\u0195\005\u0194\001\002\000\004\005\u018d\001\002" +
    "\000\004\005\026\001\002\000\006\003\024\005\023\001" +
    "\002\000\004\002\ufff9\001\002\000\006\003\077\027\100" +
    "\001\002\000\004\027\025\001\002\000\004\005\026\001" +
    "\002\000\012\003\074\010\uffe5\011\uffe5\042\073\001\002" +
    "\000\006\010\035\011\036\001\002\000\004\030\031\001" +
    "\002\000\004\045\032\001\002\000\004\011\033\001\002" +
    "\000\004\007\034\001\002\000\004\005\uffdd\001\002\000" +
    "\006\003\040\011\041\001\002\000\004\003\037\001\002" +
    "\000\010\003\uffd5\030\uffd5\045\uffd5\001\002\000\010\003" +
    "\uffd6\030\uffd6\045\uffd6\001\002\000\016\003\uffd1\005\026" +
    "\006\042\030\uffd1\041\043\045\uffd1\001\002\000\004\005" +
    "\026\001\002\000\020\003\060\005\057\017\051\020\054" +
    "\027\056\047\055\050\061\001\002\000\012\003\uffd2\006" +
    "\047\030\uffd2\045\uffd2\001\002\000\004\003\046\001\002" +
    "\000\010\003\uffd4\030\uffd4\045\uffd4\001\002\000\004\005" +
    "\026\001\002\000\010\003\uffd3\030\uffd3\045\uffd3\001\002" +
    "\000\022\003\uffe2\004\uffe2\005\uffe2\006\uffe2\012\uffe2\030" +
    "\uffe2\045\uffe2\046\uffe2\001\002\000\026\003\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\012\ufff2\030\ufff2\043\ufff2\044\066\045" +
    "\ufff2\046\ufff2\001\002\000\022\003\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\012\uffe3\030\uffe3\045\uffe3\046\uffe3\001\002\000" +
    "\022\003\uffe1\004\uffe1\005\uffe1\006\uffe1\012\uffe1\030\uffe1" +
    "\045\uffe1\046\uffe1\001\002\000\026\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\012\uffef\030\uffef\043\uffef\044\uffef\045\uffef" +
    "\046\uffef\001\002\000\012\005\057\027\056\047\055\050" +
    "\061\001\002\000\026\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\012\uffed\030\uffed\043\uffed\044\uffed\045\uffed\046\uffed\001" +
    "\002\000\022\003\uffe0\004\uffe0\005\uffe0\006\uffe0\012\uffe0" +
    "\030\uffe0\045\uffe0\046\uffe0\001\002\000\026\003\uffee\004" +
    "\uffee\005\uffee\006\uffee\012\uffee\030\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\001\002\000\026\003\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\012\ufff0\030\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\001\002\000\024\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\012\ufff4\030\ufff4\043\064\045\ufff4\046\ufff4\001\002" +
    "\000\012\005\057\027\056\047\055\050\061\001\002\000" +
    "\026\003\ufff3\004\ufff3\005\ufff3\006\ufff3\012\ufff3\030\ufff3" +
    "\043\ufff3\044\066\045\ufff3\046\ufff3\001\002\000\012\005" +
    "\057\027\056\047\055\050\061\001\002\000\026\003\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\012\ufff1\030\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\001\002\000\006\030\071\043\064" +
    "\001\002\000\026\003\uffec\004\uffec\005\uffec\006\uffec\012" +
    "\uffec\030\uffec\043\uffec\044\uffec\045\uffec\046\uffec\001\002" +
    "\000\010\003\uffd7\030\uffd7\045\uffd7\001\002\000\004\005" +
    "\026\001\002\000\004\005\026\001\002\000\006\010\uffe4" +
    "\011\uffe4\001\002\000\006\010\uffe6\011\uffe6\001\002\000" +
    "\004\005\026\001\002\000\004\005\026\001\002\000\006" +
    "\030\103\045\102\001\002\000\004\011\115\001\002\000" +
    "\006\011\105\045\104\001\002\000\006\007\111\011\110" +
    "\001\002\000\004\007\106\001\002\000\004\003\107\001" +
    "\002\000\004\005\uffda\001\002\000\006\003\113\007\114" +
    "\001\002\000\004\003\112\001\002\000\004\005\uffd9\001" +
    "\002\000\004\005\uffd8\001\002\000\004\005\uffdf\001\002" +
    "\000\004\007\116\001\002\000\004\003\117\001\002\000" +
    "\004\005\uffdb\001\002\000\004\030\121\001\002\000\004" +
    "\045\122\001\002\000\004\011\123\001\002\000\004\007" +
    "\124\001\002\000\004\005\uffdc\001\002\000\006\010\u0171" +
    "\011\u0172\001\002\000\004\012\130\001\002\000\016\002" +
    "\uffa8\003\017\004\016\005\014\012\uffa8\046\021\001\002" +
    "\000\032\003\153\005\145\012\130\015\142\026\146\027" +
    "\141\031\157\032\156\035\136\036\135\037\131\045\140" +
    "\001\002\000\006\003\u016a\040\u016b\001\002\000\040\003" +
    "\153\005\145\012\130\014\uff87\015\142\022\uff87\025\uff87" +
    "\026\146\027\141\031\157\032\156\035\136\036\135\037" +
    "\131\045\140\001\002\000\004\014\u0165\001\002\000\010" +
    "\014\uff8a\022\uff8a\025\uff8a\001\002\000\016\003\257\005" +
    "\343\017\344\020\345\047\200\050\176\001\002\000\032" +
    "\003\153\005\145\012\130\015\142\026\146\027\141\031" +
    "\157\032\156\035\136\036\135\037\131\045\140\001\002" +
    "\000\040\003\153\005\145\012\130\014\uff82\015\142\022" +
    "\uff82\025\uff82\026\146\027\141\031\157\032\156\035\136" +
    "\036\135\037\131\045\140\001\002\000\014\005\u0153\017" +
    "\302\020\304\047\305\050\310\001\002\000\016\003\u014f" +
    "\005\317\017\325\020\326\047\324\050\320\001\002\000" +
    "\016\003\257\005\343\017\344\020\345\047\200\050\176" +
    "\001\002\000\006\003\u0145\006\u0144\001\002\000\040\003" +
    "\153\005\145\012\130\014\uff7e\015\142\022\uff7e\025\uff7e" +
    "\026\146\027\141\031\157\032\156\035\136\036\135\037" +
    "\131\045\140\001\002\000\022\003\u0132\005\317\017\325" +
    "\020\326\027\323\041\u0133\047\324\050\320\001\002\000" +
    "\006\003\u0112\027\u0113\001\002\000\040\003\153\005\145" +
    "\012\130\014\uff81\015\142\022\uff81\025\uff81\026\146\027" +
    "\141\031\157\032\156\035\136\036\135\037\131\045\140" +
    "\001\002\000\040\003\153\005\145\012\130\014\uff85\015" +
    "\142\022\uff85\025\uff85\026\146\027\141\031\157\032\156" +
    "\035\136\036\135\037\131\045\140\001\002\000\040\003" +
    "\153\005\145\012\130\014\uff84\015\142\022\uff84\025\uff84" +
    "\026\146\027\141\031\157\032\156\035\136\036\135\037" +
    "\131\045\140\001\002\000\040\003\153\005\145\012\130" +
    "\014\uff83\015\142\022\uff83\025\uff83\026\146\027\141\031" +
    "\157\032\156\035\136\036\135\037\131\045\140\001\002" +
    "\000\034\003\257\005\256\014\uff89\017\247\020\255\022" +
    "\uff89\025\uff89\027\254\032\246\040\252\041\260\047\253" +
    "\050\261\001\002\000\040\003\153\005\145\012\130\014" +
    "\uff88\015\142\022\uff88\025\uff88\026\146\027\141\031\157" +
    "\032\156\035\136\036\135\037\131\045\140\001\002\000" +
    "\040\003\153\005\145\012\130\014\uff86\015\142\022\uff86" +
    "\025\uff86\026\146\027\141\031\157\032\156\035\136\036" +
    "\135\037\131\045\140\001\002\000\006\003\173\005\172" +
    "\001\002\000\006\003\160\027\161\001\002\000\004\005" +
    "\167\001\002\000\004\005\162\001\002\000\006\003\164" +
    "\030\163\001\002\000\004\006\166\001\002\000\004\006" +
    "\165\001\002\000\040\003\uff47\005\uff47\012\uff47\014\uff47" +
    "\015\uff47\022\uff47\025\uff47\026\uff47\027\uff47\031\uff47\032" +
    "\uff47\035\uff47\036\uff47\037\uff47\045\uff47\001\002\000\040" +
    "\003\uff4a\005\uff4a\012\uff4a\014\uff4a\015\uff4a\022\uff4a\025" +
    "\uff4a\026\uff4a\027\uff4a\031\uff4a\032\uff4a\035\uff4a\036\uff4a" +
    "\037\uff4a\045\uff4a\001\002\000\004\030\170\001\002\000" +
    "\004\006\171\001\002\000\040\003\uff48\005\uff48\012\uff48" +
    "\014\uff48\015\uff48\022\uff48\025\uff48\026\uff48\027\uff48\031" +
    "\uff48\032\uff48\035\uff48\036\uff48\037\uff48\045\uff48\001\002" +
    "\000\006\003\213\033\212\001\002\000\004\033\174\001" +
    "\002\000\014\005\175\017\201\020\202\047\200\050\176" +
    "\001\002\000\032\003\uff79\005\uff79\006\uff79\017\uff79\020" +
    "\uff79\021\uff79\023\uff79\024\uff79\034\uff79\035\uff79\047\uff79" +
    "\050\uff79\001\002\000\034\003\uff76\005\uff76\006\uff76\016" +
    "\uff76\017\uff76\020\uff76\021\uff76\023\uff76\024\uff76\034\uff76" +
    "\035\uff76\047\uff76\050\uff76\001\002\000\004\034\203\001" +
    "\002\000\034\003\uff7a\005\uff7a\006\uff7a\016\uff7a\017\uff7a" +
    "\020\uff7a\021\uff7a\023\uff7a\024\uff7a\034\uff7a\035\uff7a\047" +
    "\uff7a\050\uff7a\001\002\000\032\003\uff78\005\uff78\006\uff78" +
    "\017\uff78\020\uff78\021\uff78\023\uff78\024\uff78\034\uff78\035" +
    "\uff78\047\uff78\050\uff78\001\002\000\032\003\uff77\005\uff77" +
    "\006\uff77\017\uff77\020\uff77\021\uff77\023\uff77\024\uff77\034" +
    "\uff77\035\uff77\047\uff77\050\uff77\001\002\000\014\005\175" +
    "\017\201\020\202\047\200\050\176\001\002\000\004\035" +
    "\205\001\002\000\032\003\153\005\145\012\130\015\142" +
    "\026\146\027\141\031\157\032\156\035\136\036\135\037" +
    "\131\045\140\001\002\000\004\014\207\001\002\000\004" +
    "\035\210\001\002\000\004\006\211\001\002\000\040\003" +
    "\uff44\005\uff44\012\uff44\014\uff44\015\uff44\022\uff44\025\uff44" +
    "\026\uff44\027\uff44\031\uff44\032\uff44\035\uff44\036\uff44\037" +
    "\uff44\045\uff44\001\002\000\014\005\175\017\201\020\202" +
    "\047\200\050\176\001\002\000\014\005\175\017\201\020" +
    "\202\047\200\050\176\001\002\000\004\034\215\001\002" +
    "\000\014\005\175\017\201\020\202\047\200\050\176\001" +
    "\002\000\004\035\217\001\002\000\032\003\153\005\145" +
    "\012\130\015\142\026\146\027\141\031\157\032\156\035" +
    "\136\036\135\037\131\045\140\001\002\000\004\014\221" +
    "\001\002\000\004\035\222\001\002\000\004\006\223\001" +
    "\002\000\040\003\uff43\005\uff43\012\uff43\014\uff43\015\uff43" +
    "\022\uff43\025\uff43\026\uff43\027\uff43\031\uff43\032\uff43\035" +
    "\uff43\036\uff43\037\uff43\045\uff43\001\002\000\004\034\225" +
    "\001\002\000\014\005\175\017\201\020\202\047\200\050" +
    "\176\001\002\000\006\003\227\035\230\001\002\000\032" +
    "\003\153\005\145\012\130\015\142\026\146\027\141\031" +
    "\157\032\156\035\136\036\135\037\131\045\140\001\002" +
    "\000\032\003\153\005\145\012\130\015\142\026\146\027" +
    "\141\031\157\032\156\035\136\036\135\037\131\045\140" +
    "\001\002\000\004\014\232\001\002\000\006\003\233\035" +
    "\234\001\002\000\004\006\237\001\002\000\006\003\236" +
    "\006\235\001\002\000\040\003\uff46\005\uff46\012\uff46\014" +
    "\uff46\015\uff46\022\uff46\025\uff46\026\uff46\027\uff46\031\uff46" +
    "\032\uff46\035\uff46\036\uff46\037\uff46\045\uff46\001\002\000" +
    "\040\003\uff40\005\uff40\012\uff40\014\uff40\015\uff40\022\uff40" +
    "\025\uff40\026\uff40\027\uff40\031\uff40\032\uff40\035\uff40\036" +
    "\uff40\037\uff40\045\uff40\001\002\000\040\003\uff3f\005\uff3f" +
    "\012\uff3f\014\uff3f\015\uff3f\022\uff3f\025\uff3f\026\uff3f\027" +
    "\uff3f\031\uff3f\032\uff3f\035\uff3f\036\uff3f\037\uff3f\045\uff3f" +
    "\001\002\000\004\014\241\001\002\000\004\035\242\001" +
    "\002\000\004\006\243\001\002\000\040\003\uff41\005\uff41" +
    "\012\uff41\014\uff41\015\uff41\022\uff41\025\uff41\026\uff41\027" +
    "\uff41\031\uff41\032\uff41\035\uff41\036\uff41\037\uff41\045\uff41" +
    "\001\002\000\010\014\uff96\022\uff96\025\uff96\001\002\000" +
    "\010\014\uff98\022\uff98\025\uff98\001\002\000\004\005\u0105" +
    "\001\002\000\014\003\uff78\006\uffe7\016\uff78\021\uff6d\035" +
    "\uff6d\001\002\000\006\021\363\035\364\001\002\000\006" +
    "\003\351\016\350\001\002\000\016\003\257\005\343\017" +
    "\344\020\345\047\200\050\176\001\002\000\010\003\uff7a" +
    "\006\uffeb\016\uff7a\001\002\000\020\005\307\013\303\017" +
    "\302\020\304\027\306\047\305\050\310\001\002\000\014" +
    "\003\uff77\006\uffe8\016\uff77\021\uff6c\035\uff6c\001\002\000" +
    "\016\003\uff79\006\uffe9\016\uff79\021\uff6e\033\271\035\uff6e" +
    "\001\002\000\010\006\uff6b\021\uff6b\035\uff6b\001\002\000" +
    "\006\017\265\020\266\001\002\000\010\003\uff76\006\uffea" +
    "\016\uff76\001\002\000\004\006\263\001\002\000\040\003" +
    "\153\005\145\012\130\014\uff7c\015\142\022\uff7c\025\uff7c" +
    "\026\146\027\141\031\157\032\156\035\136\036\135\037" +
    "\131\045\140\001\002\000\010\014\uff94\022\uff94\025\uff94" +
    "\001\002\000\004\006\270\001\002\000\004\006\267\001" +
    "\002\000\040\003\uff9e\005\uff9e\012\uff9e\014\uff9e\015\uff9e" +
    "\022\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\032\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\045\uff9e\001\002\000\040\003\uffa4" +
    "\005\uffa4\012\uffa4\014\uffa4\015\uffa4\022\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\031\uffa4\032\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\045\uffa4\001\002\000\014\005\175\017\201\020\202\047" +
    "\200\050\176\001\002\000\004\034\273\001\002\000\014" +
    "\005\175\017\201\020\202\047\200\050\176\001\002\000" +
    "\004\035\275\001\002\000\032\003\153\005\145\012\130" +
    "\015\142\026\146\027\141\031\157\032\156\035\136\036" +
    "\135\037\131\045\140\001\002\000\004\014\277\001\002" +
    "\000\004\035\300\001\002\000\004\006\301\001\002\000" +
    "\040\003\uff45\005\uff45\012\uff45\014\uff45\015\uff45\022\uff45" +
    "\025\uff45\026\uff45\027\uff45\031\uff45\032\uff45\035\uff45\036" +
    "\uff45\037\uff45\045\uff45\001\002\000\010\003\uffe7\006\uffe7" +
    "\030\uffe7\001\002\000\004\030\341\001\002\000\010\003" +
    "\uffe8\006\uffe8\030\uffe8\001\002\000\010\003\uffeb\006\uffeb" +
    "\030\uffeb\001\002\000\014\005\317\017\325\020\326\047" +
    "\324\050\320\001\002\000\022\003\uffe9\005\317\017\325" +
    "\020\326\027\323\030\uffe9\047\324\050\320\001\002\000" +
    "\010\003\uffea\006\uffea\030\uffea\001\002\000\004\030\315" +
    "\001\002\000\004\030\313\001\002\000\004\006\314\001" +
    "\002\000\040\003\uff61\005\uff61\012\uff61\014\uff61\015\uff61" +
    "\022\uff61\025\uff61\026\uff61\027\uff61\031\uff61\032\uff61\035" +
    "\uff61\036\uff61\037\uff61\045\uff61\001\002\000\004\006\316" +
    "\001\002\000\040\003\uff5e\005\uff5e\012\uff5e\014\uff5e\015" +
    "\uff5e\022\uff5e\025\uff5e\026\uff5e\027\uff5e\031\uff5e\032\uff5e" +
    "\035\uff5e\036\uff5e\037\uff5e\045\uff5e\001\002\000\010\003" +
    "\uff4e\030\uff4e\042\uff4e\001\002\000\010\003\uff4d\030\uff4d" +
    "\042\uff4d\001\002\000\010\003\uff50\030\uff50\042\334\001" +
    "\002\000\004\030\332\001\002\000\014\005\317\017\325" +
    "\020\326\047\324\050\320\001\002\000\010\003\uff4f\030" +
    "\uff4f\042\uff4f\001\002\000\010\003\uff4c\030\uff4c\042\uff4c" +
    "\001\002\000\010\003\uff4b\030\uff4b\042\uff4b\001\002\000" +
    "\006\003\331\030\330\001\002\000\010\003\uff55\006\uff55" +
    "\030\uff55\001\002\000\010\003\uff52\006\uff52\030\uff52\001" +
    "\002\000\004\003\333\001\002\000\010\003\uff53\006\uff53" +
    "\030\uff53\001\002\000\014\005\317\017\325\020\326\047" +
    "\324\050\320\001\002\000\006\003\uff51\030\uff51\001\002" +
    "\000\004\030\337\001\002\000\004\003\340\001\002\000" +
    "\010\003\uff54\006\uff54\030\uff54\001\002\000\004\006\342" +
    "\001\002\000\040\003\uff64\005\uff64\012\uff64\014\uff64\015" +
    "\uff64\022\uff64\025\uff64\026\uff64\027\uff64\031\uff64\032\uff64" +
    "\035\uff64\036\uff64\037\uff64\045\uff64\001\002\000\014\003" +
    "\uff79\006\uff6e\016\uff79\021\uff6e\035\uff6e\001\002\000\014" +
    "\003\uff78\006\uff6d\016\uff78\021\uff6d\035\uff6d\001\002\000" +
    "\014\003\uff77\006\uff6c\016\uff77\021\uff6c\035\uff6c\001\002" +
    "\000\004\006\347\001\002\000\040\003\uff39\005\uff39\012" +
    "\uff39\014\uff39\015\uff39\022\uff39\025\uff39\026\uff39\027\uff39" +
    "\031\uff39\032\uff39\035\uff39\036\uff39\037\uff39\045\uff39\001" +
    "\002\000\014\005\175\017\201\020\202\047\200\050\176" +
    "\001\002\000\014\005\175\017\201\020\202\047\200\050" +
    "\176\001\002\000\016\003\354\006\uff70\021\uff70\023\355" +
    "\024\356\035\uff70\001\002\000\016\003\257\005\343\017" +
    "\344\020\345\047\200\050\176\001\002\000\016\003\uff73" +
    "\005\uff73\017\uff73\020\uff73\047\uff73\050\uff73\001\002\000" +
    "\016\003\uff75\005\uff75\017\uff75\020\uff75\047\uff75\050\uff75" +
    "\001\002\000\016\003\uff74\005\uff74\017\uff74\020\uff74\047" +
    "\uff74\050\uff74\001\002\000\010\006\uff6f\021\uff6f\035\uff6f" +
    "\001\002\000\016\003\354\006\uff71\021\uff71\023\355\024" +
    "\356\035\uff71\001\002\000\016\003\257\005\343\017\344" +
    "\020\345\047\200\050\176\001\002\000\010\006\uff72\021" +
    "\uff72\035\uff72\001\002\000\032\003\153\005\145\012\130" +
    "\015\142\026\146\027\141\031\157\032\156\035\136\036" +
    "\135\037\131\045\140\001\002\000\032\003\153\005\145" +
    "\012\130\015\142\026\146\027\141\031\157\032\156\035" +
    "\136\036\135\037\131\045\140\001\002\000\004\014\366" +
    "\001\002\000\004\035\367\001\002\000\004\006\370\001" +
    "\002\000\040\003\uff3d\005\uff3d\012\uff3d\014\uff3d\015\uff3d" +
    "\022\uff3d\025\uff3d\026\uff3d\027\uff3d\031\uff3d\032\uff3d\035" +
    "\uff3d\036\uff3d\037\uff3d\045\uff3d\001\002\000\006\022\374" +
    "\025\372\001\002\000\032\003\153\005\145\012\130\015" +
    "\142\026\146\027\141\031\157\032\156\035\136\036\135" +
    "\037\131\045\140\001\002\000\040\003\uff67\005\uff67\012" +
    "\uff67\014\uff67\015\uff67\022\uff67\025\uff67\026\uff67\027\uff67" +
    "\031\uff67\032\uff67\035\uff67\036\uff67\037\uff67\045\uff67\001" +
    "\002\000\016\003\257\005\343\017\344\020\345\047\200" +
    "\050\176\001\002\000\004\021\376\001\002\000\032\003" +
    "\153\005\145\012\130\015\142\026\146\027\141\031\157" +
    "\032\156\035\136\036\135\037\131\045\140\001\002\000" +
    "\006\022\374\025\372\001\002\000\040\003\uff6a\005\uff6a" +
    "\012\uff6a\014\uff6a\015\uff6a\022\uff6a\025\uff6a\026\uff6a\027" +
    "\uff6a\031\uff6a\032\uff6a\035\uff6a\036\uff6a\037\uff6a\045\uff6a" +
    "\001\002\000\004\014\u0102\001\002\000\004\015\u0103\001" +
    "\002\000\004\006\u0104\001\002\000\040\003\uff69\005\uff69" +
    "\012\uff69\014\uff69\015\uff69\022\uff69\025\uff69\026\uff69\027" +
    "\uff69\031\uff69\032\uff69\035\uff69\036\uff69\037\uff69\045\uff69" +
    "\001\002\000\004\033\u0106\001\002\000\014\005\175\017" +
    "\201\020\202\047\200\050\176\001\002\000\014\005\175" +
    "\017\201\020\202\047\200\050\176\001\002\000\004\035" +
    "\u0109\001\002\000\032\003\153\005\145\012\130\015\142" +
    "\026\146\027\141\031\157\032\156\035\136\036\135\037" +
    "\131\045\140\001\002\000\004\014\u010b\001\002\000\004" +
    "\035\u010c\001\002\000\004\006\u010d\001\002\000\040\003" +
    "\uff42\005\uff42\012\uff42\014\uff42\015\uff42\022\uff42\025\uff42" +
    "\026\uff42\027\uff42\031\uff42\032\uff42\035\uff42\036\uff42\037" +
    "\uff42\045\uff42\001\002\000\010\014\uff92\022\uff92\025\uff92" +
    "\001\002\000\010\014\uff90\022\uff90\025\uff90\001\002\000" +
    "\010\014\uff91\022\uff91\025\uff91\001\002\000\010\014\uff8f" +
    "\022\uff8f\025\uff8f\001\002\000\020\005\307\013\u0129\017" +
    "\302\020\304\027\306\047\305\050\310\001\002\000\022" +
    "\003\u0115\005\307\013\u0114\017\302\020\304\027\306\047" +
    "\305\050\310\001\002\000\006\003\u0125\030\u0124\001\002" +
    "\000\004\030\u0122\001\002\000\006\003\u011d\030\u011e\001" +
    "\002\000\006\003\u0118\030\u0119\001\002\000\004\006\u011c" +
    "\001\002\000\006\003\u011b\006\u011a\001\002\000\040\003" +
    "\uff57\005\uff57\012\uff57\014\uff57\015\uff57\022\uff57\025\uff57" +
    "\026\uff57\027\uff57\031\uff57\032\uff57\035\uff57\036\uff57\037" +
    "\uff57\045\uff57\001\002\000\040\003\uff59\005\uff59\012\uff59" +
    "\014\uff59\015\uff59\022\uff59\025\uff59\026\uff59\027\uff59\031" +
    "\uff59\032\uff59\035\uff59\036\uff59\037\uff59\045\uff59\001\002" +
    "\000\040\003\uff5f\005\uff5f\012\uff5f\014\uff5f\015\uff5f\022" +
    "\uff5f\025\uff5f\026\uff5f\027\uff5f\031\uff5f\032\uff5f\035\uff5f" +
    "\036\uff5f\037\uff5f\045\uff5f\001\002\000\004\006\u0121\001" +
    "\002\000\006\003\u0120\006\u011f\001\002\000\040\003\uff56" +
    "\005\uff56\012\uff56\014\uff56\015\uff56\022\uff56\025\uff56\026" +
    "\uff56\027\uff56\031\uff56\032\uff56\035\uff56\036\uff56\037\uff56" +
    "\045\uff56\001\002\000\040\003\uff58\005\uff58\012\uff58\014" +
    "\uff58\015\uff58\022\uff58\025\uff58\026\uff58\027\uff58\031\uff58" +
    "\032\uff58\035\uff58\036\uff58\037\uff58\045\uff58\001\002\000" +
    "\040\003\uff5c\005\uff5c\012\uff5c\014\uff5c\015\uff5c\022\uff5c" +
    "\025\uff5c\026\uff5c\027\uff5c\031\uff5c\032\uff5c\035\uff5c\036" +
    "\uff5c\037\uff5c\045\uff5c\001\002\000\004\006\u0123\001\002" +
    "\000\040\003\uff5b\005\uff5b\012\uff5b\014\uff5b\015\uff5b\022" +
    "\uff5b\025\uff5b\026\uff5b\027\uff5b\031\uff5b\032\uff5b\035\uff5b" +
    "\036\uff5b\037\uff5b\045\uff5b\001\002\000\006\003\u0128\006" +
    "\u0127\001\002\000\004\006\u0126\001\002\000\040\003\uff62" +
    "\005\uff62\012\uff62\014\uff62\015\uff62\022\uff62\025\uff62\026" +
    "\uff62\027\uff62\031\uff62\032\uff62\035\uff62\036\uff62\037\uff62" +
    "\045\uff62\001\002\000\040\003\uff65\005\uff65\012\uff65\014" +
    "\uff65\015\uff65\022\uff65\025\uff65\026\uff65\027\uff65\031\uff65" +
    "\032\uff65\035\uff65\036\uff65\037\uff65\045\uff65\001\002\000" +
    "\040\003\uff5a\005\uff5a\012\uff5a\014\uff5a\015\uff5a\022\uff5a" +
    "\025\uff5a\026\uff5a\027\uff5a\031\uff5a\032\uff5a\035\uff5a\036" +
    "\uff5a\037\uff5a\045\uff5a\001\002\000\004\030\u0130\001\002" +
    "\000\004\030\u012e\001\002\000\004\030\u012c\001\002\000" +
    "\004\006\u012d\001\002\000\040\003\uff60\005\uff60\012\uff60" +
    "\014\uff60\015\uff60\022\uff60\025\uff60\026\uff60\027\uff60\031" +
    "\uff60\032\uff60\035\uff60\036\uff60\037\uff60\045\uff60\001\002" +
    "\000\004\006\u012f\001\002\000\040\003\uff5d\005\uff5d\012" +
    "\uff5d\014\uff5d\015\uff5d\022\uff5d\025\uff5d\026\uff5d\027\uff5d" +
    "\031\uff5d\032\uff5d\035\uff5d\036\uff5d\037\uff5d\045\uff5d\001" +
    "\002\000\004\006\u0131\001\002\000\040\003\uff63\005\uff63" +
    "\012\uff63\014\uff63\015\uff63\022\uff63\025\uff63\026\uff63\027" +
    "\uff63\031\uff63\032\uff63\035\uff63\036\uff63\037\uff63\045\uff63" +
    "\001\002\000\046\003\uff9f\005\uff9f\006\u013e\012\uff9f\014" +
    "\uff9f\015\uff9f\017\u013f\020\u0140\022\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\031\uff9f\032\uff9f\035\uff9f\036\uff9f\037\uff9f\045" +
    "\uff9f\001\002\000\020\003\u0137\005\057\017\u0134\020\u0136" +
    "\027\056\047\055\050\061\001\002\000\006\003\u013d\006" +
    "\u013c\001\002\000\004\006\u013b\001\002\000\006\003\u013a" +
    "\006\u0139\001\002\000\004\006\u0138\001\002\000\040\003" +
    "\uffa1\005\uffa1\012\uffa1\014\uffa1\015\uffa1\022\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\031\uffa1\032\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\045\uffa1\001\002\000\040\003\uff9b\005\uff9b\012\uff9b" +
    "\014\uff9b\015\uff9b\022\uff9b\025\uff9b\026\uff9b\027\uff9b\031" +
    "\uff9b\032\uff9b\035\uff9b\036\uff9b\037\uff9b\045\uff9b\001\002" +
    "\000\040\003\uff9c\005\uff9c\012\uff9c\014\uff9c\015\uff9c\022" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\031\uff9c\032\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\045\uff9c\001\002\000\040\003\uff9a\005" +
    "\uff9a\012\uff9a\014\uff9a\015\uff9a\022\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\031\uff9a\032\uff9a\035\uff9a\036\uff9a\037\uff9a\045" +
    "\uff9a\001\002\000\040\003\uffa5\005\uffa5\012\uffa5\014\uffa5" +
    "\015\uffa5\022\uffa5\025\uffa5\026\uffa5\027\uffa5\031\uffa5\032" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\045\uffa5\001\002\000\040" +
    "\003\uffa2\005\uffa2\012\uffa2\014\uffa2\015\uffa2\022\uffa2\025" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\032\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\045\uffa2\001\002\000\040\003\uffa0\005\uffa0\012" +
    "\uffa0\014\uffa0\015\uffa0\022\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\031\uffa0\032\uffa0\035\uffa0\036\uffa0\037\uffa0\045\uffa0\001" +
    "\002\000\004\006\u0142\001\002\000\004\006\u0141\001\002" +
    "\000\040\003\uff9d\005\uff9d\012\uff9d\014\uff9d\015\uff9d\022" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\031\uff9d\032\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\045\uff9d\001\002\000\040\003\uffa3\005" +
    "\uffa3\012\uffa3\014\uffa3\015\uffa3\022\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\031\uffa3\032\uffa3\035\uffa3\036\uffa3\037\uffa3\045" +
    "\uffa3\001\002\000\010\014\uff8b\022\uff8b\025\uff8b\001\002" +
    "\000\040\003\153\005\145\012\130\014\uff80\015\142\022" +
    "\uff80\025\uff80\026\146\027\141\031\157\032\156\035\136" +
    "\036\135\037\131\045\140\001\002\000\040\003\153\005" +
    "\145\012\130\014\uff7f\015\142\022\uff7f\025\uff7f\026\146" +
    "\027\141\031\157\032\156\035\136\036\135\037\131\045" +
    "\140\001\002\000\010\014\uff8c\022\uff8c\025\uff8c\001\002" +
    "\000\010\014\uff8d\022\uff8d\025\uff8d\001\002\000\004\021" +
    "\u0149\001\002\000\032\003\153\005\145\012\130\015\142" +
    "\026\146\027\141\031\157\032\156\035\136\036\135\037" +
    "\131\045\140\001\002\000\010\014\u014c\022\374\025\372" +
    "\001\002\000\040\003\uff68\005\uff68\012\uff68\014\uff68\015" +
    "\uff68\022\uff68\025\uff68\026\uff68\027\uff68\031\uff68\032\uff68" +
    "\035\uff68\036\uff68\037\uff68\045\uff68\001\002\000\004\015" +
    "\u014d\001\002\000\004\006\u014e\001\002\000\040\003\uff66" +
    "\005\uff66\012\uff66\014\uff66\015\uff66\022\uff66\025\uff66\026" +
    "\uff66\027\uff66\031\uff66\032\uff66\035\uff66\036\uff66\037\uff66" +
    "\045\uff66\001\002\000\004\005\u0150\001\002\000\004\030" +
    "\u0151\001\002\000\004\006\u0152\001\002\000\040\003\uff49" +
    "\005\uff49\012\uff49\014\uff49\015\uff49\022\uff49\025\uff49\026" +
    "\uff49\027\uff49\031\uff49\032\uff49\035\uff49\036\uff49\037\uff49" +
    "\045\uff49\001\002\000\006\003\uffe9\006\uffe9\001\002\000" +
    "\006\003\u0156\006\u0155\001\002\000\040\003\153\005\145" +
    "\012\130\014\uff7d\015\142\022\uff7d\025\uff7d\026\146\027" +
    "\141\031\157\032\156\035\136\036\135\037\131\045\140" +
    "\001\002\000\040\003\153\005\145\012\130\014\uff7b\015" +
    "\142\022\uff7b\025\uff7b\026\146\027\141\031\157\032\156" +
    "\035\136\036\135\037\131\045\140\001\002\000\010\014" +
    "\uff93\022\uff93\025\uff93\001\002\000\010\014\uff95\022\uff95" +
    "\025\uff95\001\002\000\010\014\uff8e\022\uff8e\025\uff8e\001" +
    "\002\000\004\014\u015b\001\002\000\004\035\u015c\001\002" +
    "\000\006\003\u015e\006\u015d\001\002\000\040\003\uff3c\005" +
    "\uff3c\012\uff3c\014\uff3c\015\uff3c\022\uff3c\025\uff3c\026\uff3c" +
    "\027\uff3c\031\uff3c\032\uff3c\035\uff3c\036\uff3c\037\uff3c\045" +
    "\uff3c\001\002\000\040\003\uff3b\005\uff3b\012\uff3b\014\uff3b" +
    "\015\uff3b\022\uff3b\025\uff3b\026\uff3b\027\uff3b\031\uff3b\032" +
    "\uff3b\035\uff3b\036\uff3b\037\uff3b\045\uff3b\001\002\000\004" +
    "\035\u0160\001\002\000\032\003\153\005\145\012\130\015" +
    "\142\026\146\027\141\031\157\032\156\035\136\036\135" +
    "\037\131\045\140\001\002\000\004\014\u0162\001\002\000" +
    "\004\035\u0163\001\002\000\004\006\u0164\001\002\000\040" +
    "\003\uff3e\005\uff3e\012\uff3e\014\uff3e\015\uff3e\022\uff3e\025" +
    "\uff3e\026\uff3e\027\uff3e\031\uff3e\032\uff3e\035\uff3e\036\uff3e" +
    "\037\uff3e\045\uff3e\001\002\000\006\005\u0166\006\ufff5\001" +
    "\002\000\004\006\ufff6\001\002\000\004\006\u0168\001\002" +
    "\000\046\002\uff99\003\uff99\004\uff99\005\uff99\012\uff99\014" +
    "\uff99\015\uff99\022\uff99\025\uff99\026\uff99\027\uff99\031\uff99" +
    "\032\uff99\035\uff99\036\uff99\037\uff99\045\uff99\046\uff99\001" +
    "\002\000\010\014\uff97\022\uff97\025\uff97\001\002\000\016" +
    "\003\257\005\343\017\344\020\345\047\200\050\176\001" +
    "\002\000\016\003\257\005\343\017\344\020\345\047\200" +
    "\050\176\001\002\000\004\006\u016d\001\002\000\040\003" +
    "\uff3a\005\uff3a\012\uff3a\014\uff3a\015\uff3a\022\uff3a\025\uff3a" +
    "\026\uff3a\027\uff3a\031\uff3a\032\uff3a\035\uff3a\036\uff3a\037" +
    "\uff3a\045\uff3a\001\002\000\004\006\u016f\001\002\000\040" +
    "\003\uff38\005\uff38\012\uff38\014\uff38\015\uff38\022\uff38\025" +
    "\uff38\026\uff38\027\uff38\031\uff38\032\uff38\035\uff38\036\uff38" +
    "\037\uff38\045\uff38\001\002\000\006\002\uffb8\012\uffb8\001" +
    "\002\000\006\003\u017c\011\u017d\001\002\000\006\003\u0173" +
    "\041\043\001\002\000\006\006\u0177\041\043\001\002\000" +
    "\004\003\u0175\001\002\000\004\006\u0176\001\002\000\006" +
    "\003\uffc3\012\uffc3\001\002\000\010\003\uffc9\005\026\012" +
    "\uffc9\001\002\000\004\006\u0179\001\002\000\004\005\026" +
    "\001\002\000\006\003\uffc6\012\uffc6\001\002\000\006\003" +
    "\uffcc\012\uffcc\001\002\000\006\006\u0188\041\043\001\002" +
    "\000\010\003\u017f\006\u017e\041\043\001\002\000\010\003" +
    "\uffcd\005\026\012\uffcd\001\002\000\012\003\uffc7\005\026" +
    "\012\uffc7\041\043\001\002\000\006\005\026\006\u0182\001" +
    "\002\000\004\003\u0184\001\002\000\010\003\uffce\005\026" +
    "\012\uffce\001\002\000\006\003\uffcf\012\uffcf\001\002\000" +
    "\006\003\uffc4\012\uffc4\001\002\000\006\003\uffca\012\uffca" +
    "\001\002\000\006\003\uffc1\012\uffc1\001\002\000\006\003" +
    "\uffd0\012\uffd0\001\002\000\010\003\uffc8\005\026\012\uffc8" +
    "\001\002\000\004\006\u018a\001\002\000\010\003\uffc2\005" +
    "\026\012\uffc2\001\002\000\006\003\uffc5\012\uffc5\001\002" +
    "\000\006\003\uffcb\012\uffcb\001\002\000\004\027\u018e\001" +
    "\002\000\004\005\026\001\002\000\004\030\u0190\001\002" +
    "\000\004\045\u0191\001\002\000\004\011\u0192\001\002\000" +
    "\004\007\u0193\001\002\000\004\005\uffde\001\002\000\006" +
    "\003\u019b\007\u019c\001\002\000\004\007\u0196\001\002\000" +
    "\014\003\017\004\016\005\014\012\130\046\021\001\002" +
    "\000\004\012\130\001\002\000\006\002\uffae\012\uffae\001" +
    "\002\000\016\002\uffb1\003\017\004\016\005\014\012\uffb1" +
    "\046\021\001\002\000\006\002\uffb4\012\uffb4\001\002\000" +
    "\014\003\017\004\016\005\014\012\130\046\021\001\002" +
    "\000\014\003\017\004\016\005\014\012\130\046\021\001" +
    "\002\000\004\012\130\001\002\000\006\002\uffa6\012\uffa6" +
    "\001\002\000\016\002\uffa7\003\017\004\016\005\014\012" +
    "\uffa7\046\021\001\002\000\006\002\uffb7\012\uffb7\001\002" +
    "\000\004\012\130\001\002\000\006\002\uffaf\012\uffaf\001" +
    "\002\000\016\002\uffb2\003\017\004\016\005\014\012\uffb2" +
    "\046\021\001\002\000\006\002\uffb5\012\uffb5\001\002\000" +
    "\006\003\u01ad\011\u01ae\001\002\000\004\003\u01a7\001\002" +
    "\000\006\006\u01a8\041\043\001\002\000\016\002\uffac\003" +
    "\017\004\016\005\014\012\uffac\046\021\001\002\000\004" +
    "\006\u01aa\001\002\000\012\003\017\004\016\005\014\046" +
    "\021\001\002\000\006\002\uffbb\012\uffbb\001\002\000\006" +
    "\002\uffbf\012\uffbf\001\002\000\006\006\u01b8\041\043\001" +
    "\002\000\010\003\u01b1\006\u01af\041\043\001\002\000\016" +
    "\002\uffad\003\017\004\016\005\014\012\uffad\046\021\001" +
    "\002\000\004\006\u01b5\001\002\000\020\002\uffaa\003\017" +
    "\004\016\005\014\012\uffaa\041\043\046\021\001\002\000" +
    "\006\002\uffbd\012\uffbd\001\002\000\012\003\017\004\016" +
    "\005\014\046\021\001\002\000\006\002\uffb9\012\uffb9\001" +
    "\002\000\016\002\uffa9\003\017\004\016\005\014\012\uffa9" +
    "\046\021\001\002\000\006\002\uffbc\012\uffbc\001\002\000" +
    "\006\002\uffc0\012\uffc0\001\002\000\016\002\uffab\003\017" +
    "\004\016\005\014\012\uffab\046\021\001\002\000\004\006" +
    "\u01ba\001\002\000\012\003\017\004\016\005\014\046\021" +
    "\001\002\000\006\002\uffba\012\uffba\001\002\000\006\002" +
    "\uffbe\012\uffbe\001\002\000\006\005\026\007\u01be\001\002" +
    "\000\014\003\017\004\016\005\014\012\130\046\021\001" +
    "\002\000\004\012\130\001\002\000\006\002\uffb0\012\uffb0" +
    "\001\002\000\016\002\uffb3\003\017\004\016\005\014\012" +
    "\uffb3\046\021\001\002\000\006\002\uffb6\012\uffb6\001\002" +
    "\000\014\003\017\004\016\005\014\012\130\046\021\001" +
    "\002\000\004\012\130\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffe\001\002\000\006\003\u01cd\007\u01ce\001" +
    "\002\000\004\007\u01c9\001\002\000\014\003\017\004\016" +
    "\005\014\012\130\046\021\001\002\000\004\012\130\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\ufffc\001\002" +
    "\000\014\003\017\004\016\005\014\012\130\046\021\001" +
    "\002\000\014\003\017\004\016\005\014\012\130\046\021" +
    "\001\002\000\004\012\130\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\000\001\002\000\004\012\130\001\002" +
    "\000\004\002\ufff7\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d2\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\021\020\014\025\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\124\032\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\026\034" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\026\024" +
    "\043\034\044\001\001\000\006\020\026\034\071\001\001" +
    "\000\012\026\052\027\051\030\061\031\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\026\034\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\051\030\061\031\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\064\030" +
    "\061\001\001\000\002\001\001\000\004\030\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\075\001\001\000\004\020\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\026\034\117\001\001\000\006\020\026\034\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\126\001\001\000" +
    "\010\003\u016f\020\014\025\017\001\001\000\032\004\146" +
    "\006\151\011\147\012\150\013\153\014\131\015\154\016" +
    "\143\017\136\022\132\023\133\037\142\001\001\000\002" +
    "\001\001\000\032\004\146\006\151\011\147\012\150\013" +
    "\153\014\131\015\154\016\143\017\136\022\u0168\023\133" +
    "\037\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\250\007\u015e\001\001\000\032\004\146\006\151" +
    "\011\147\012\150\013\153\014\131\015\154\016\143\017" +
    "\136\022\u0159\023\133\037\142\001\001\000\032\004\146" +
    "\006\151\011\147\012\150\013\153\014\131\015\154\016" +
    "\143\017\136\022\u0158\023\133\037\142\001\001\000\004" +
    "\035\u0153\001\001\000\006\033\320\036\335\001\001\000" +
    "\006\005\250\007\u0147\001\001\000\002\001\001\000\032" +
    "\004\146\006\151\011\147\012\150\013\153\014\131\015" +
    "\154\016\143\017\136\022\u0142\023\133\037\142\001\001" +
    "\000\006\033\320\036\321\001\001\000\002\001\001\000" +
    "\032\004\146\006\151\011\147\012\150\013\153\014\131" +
    "\015\154\016\143\017\136\022\u0110\023\133\037\142\001" +
    "\001\000\032\004\146\006\151\011\147\012\150\013\153" +
    "\014\131\015\154\016\143\017\136\022\u010f\023\133\037" +
    "\142\001\001\000\032\004\146\006\151\011\147\012\150" +
    "\013\153\014\131\015\154\016\143\017\136\022\u010e\023" +
    "\133\037\142\001\001\000\032\004\146\006\151\011\147" +
    "\012\150\013\153\014\131\015\154\016\143\017\136\022" +
    "\u010d\023\133\037\142\001\001\000\010\005\250\007\247" +
    "\035\261\001\001\000\032\004\146\006\151\011\147\012" +
    "\150\013\153\014\131\015\154\016\143\017\136\022\244" +
    "\023\133\037\142\001\001\000\032\004\146\006\151\011" +
    "\147\012\150\013\153\014\131\015\154\016\143\017\136" +
    "\022\243\023\133\037\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\203\001\001\000\002\001\001" +
    "\000\032\004\146\006\151\011\147\012\150\013\153\014" +
    "\131\015\154\016\143\017\136\022\205\023\133\037\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\223\001\001\000\004" +
    "\005\213\001\001\000\002\001\001\000\004\005\215\001" +
    "\001\000\002\001\001\000\032\004\146\006\151\011\147" +
    "\012\150\013\153\014\131\015\154\016\143\017\136\022" +
    "\217\023\133\037\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\225\001\001\000\002\001\001\000\032" +
    "\004\146\006\151\011\147\012\150\013\153\014\131\015" +
    "\154\016\143\017\136\022\237\023\133\037\142\001\001" +
    "\000\032\004\146\006\151\011\147\012\150\013\153\014" +
    "\131\015\154\016\143\017\136\022\230\023\133\037\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\250\007\345\001\001" +
    "\000\002\001\001\000\006\035\311\037\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\146\006\151\011\147\012\150\013\153\014\131\015\154" +
    "\016\143\017\136\022\263\023\133\037\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\271\001\001\000" +
    "\002\001\001\000\004\005\273\001\001\000\002\001\001" +
    "\000\032\004\146\006\151\011\147\012\150\013\153\014" +
    "\131\015\154\016\143\017\136\022\275\023\133\037\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\320\036" +
    "\335\001\001\000\006\033\320\036\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\320\036\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\320\036\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\357\001\001\000\004\005" +
    "\351\001\001\000\004\040\352\001\001\000\006\005\250" +
    "\007\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\360\001\001" +
    "\000\006\005\250\007\361\001\001\000\002\001\001\000" +
    "\032\004\146\006\151\011\147\012\150\013\153\014\131" +
    "\015\154\016\143\017\136\022\370\023\133\037\142\001" +
    "\001\000\032\004\146\006\151\011\147\012\150\013\153" +
    "\014\131\015\154\016\143\017\136\022\364\023\133\037" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\372\001\001\000" +
    "\032\004\146\006\151\011\147\012\150\013\153\014\131" +
    "\015\154\016\143\017\136\022\u0100\023\133\037\142\001" +
    "\001\000\002\001\001\000\006\005\250\007\374\001\001" +
    "\000\002\001\001\000\032\004\146\006\151\011\147\012" +
    "\150\013\153\014\131\015\154\016\143\017\136\022\376" +
    "\023\133\037\142\001\001\000\004\010\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u0106\001\001\000\004\005\u0107\001\001\000\002\001\001" +
    "\000\032\004\146\006\151\011\147\012\150\013\153\014" +
    "\131\015\154\016\143\017\136\022\u0109\023\133\037\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\u012a\037" +
    "\u0129\001\001\000\006\035\u0116\037\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\u0134\027\051\030\061" +
    "\031\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\146\006\151\011\147\012\150" +
    "\013\153\014\131\015\154\016\143\017\136\022\u0146\023" +
    "\133\037\142\001\001\000\032\004\146\006\151\011\147" +
    "\012\150\013\153\014\131\015\154\016\143\017\136\022" +
    "\u0145\023\133\037\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\146\006\151\011" +
    "\147\012\150\013\153\014\131\015\154\016\143\017\136" +
    "\022\u0149\023\133\037\142\001\001\000\004\010\u014a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\146\006\151\011\147\012\150\013" +
    "\153\014\131\015\154\016\143\017\136\022\u0157\023\133" +
    "\037\142\001\001\000\032\004\146\006\151\011\147\012" +
    "\150\013\153\014\131\015\154\016\143\017\136\022\u0156" +
    "\023\133\037\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\146\006\151\011\147\012\150" +
    "\013\153\014\131\015\154\016\143\017\136\022\u0160\023" +
    "\133\037\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\250\007\u016d\001\001\000" +
    "\006\005\250\007\u016b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0173\001\001\000\004" +
    "\024\u0177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\124\032\u017a\001\001\000\002" +
    "\001\001\000\006\020\124\032\u0179\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0188\001\001\000\004" +
    "\024\u017f\001\001\000\006\020\124\032\u0186\001\001\000" +
    "\010\020\124\024\u0185\032\u0184\001\001\000\006\020\124" +
    "\032\u0180\001\001\000\002\001\001\000\006\020\124\032" +
    "\u0182\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\124\032\u018b\001\001\000\002\001\001\000\006\020\124" +
    "\032\u018a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\026\034\u018e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\u0196\004\u0197\020\014\025\017\001\001\000" +
    "\004\004\u0198\001\001\000\002\001\001\000\010\003\u0199" +
    "\020\014\025\017\001\001\000\002\001\001\000\012\003" +
    "\u01a0\004\u01a1\020\014\025\017\001\001\000\012\003\u019c" +
    "\004\u019d\020\014\025\017\001\001\000\004\004\u019e\001" +
    "\001\000\002\001\001\000\010\003\u019f\020\014\025\017" +
    "\001\001\000\002\001\001\000\004\004\u01a2\001\001\000" +
    "\002\001\001\000\010\003\u01a3\020\014\025\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u01a8\001\001\000\010\003\u01ab\020\014\025\017" +
    "\001\001\000\002\001\001\000\010\003\u01aa\020\014\025" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u01b8\001\001\000\004\024\u01af\001\001\000\010\003" +
    "\u01b6\020\014\025\017\001\001\000\002\001\001\000\012" +
    "\003\u01b1\020\014\024\u01b2\025\017\001\001\000\002\001" +
    "\001\000\010\003\u01b3\020\014\025\017\001\001\000\002" +
    "\001\001\000\010\003\u01b5\020\014\025\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\u01bb\020\014" +
    "\025\017\001\001\000\002\001\001\000\010\003\u01ba\020" +
    "\014\025\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\074\001\001\000\012\003\u01be\004\u01bf\020" +
    "\014\025\017\001\001\000\004\004\u01c0\001\001\000\002" +
    "\001\001\000\010\003\u01c1\020\014\025\017\001\001\000" +
    "\002\001\001\000\012\003\u01c3\004\u01c4\020\014\025\017" +
    "\001\001\000\004\004\u01c5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\u01c9\004\u01ca\020\014\025\017\001\001\000\004\004" +
    "\u01cb\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\u01d1\004\u01d2\020\014\025\017\001\001\000\012\003" +
    "\u01ce\004\u01cf\020\014\025\017\001\001\000\004\004\u01d0" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u01d3\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<String> errores = new ArrayList();
    public void unrecovered_syntax_error(Symbol s) {
        errores.add("Error de sintaxis en el codigo. Revise el codigo. No recuperable.");
    }
    public Nodo padre;
    public int contador;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // exit_when ::= EXIT error condicion_if SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicion_loopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicion_loopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion_loop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  parser.errores.add("Identificador when esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exit_when",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // exit_when ::= error WHEN condicion_if SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicion_loopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicion_loopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion_loop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Identificador de accion esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exit_when",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // exit_when ::= EXIT WHEN condicion_if SEMICOLON 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicion_loopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicion_loopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion_loop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo exitwhen = new Nodo ("exit-when");
exitwhen.setNumNodo(parser.contador++);
exitwhen.addHijo((Nodo) condicion_loop);
RESULT = exitwhen;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exit_when",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // loop_func ::= LOOP cuerpo END LOOP error 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp_finalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp_finalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp_final = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.errores.add("Fin de linea [;] esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("loop_func",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // loop_func ::= LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp_finalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp_finalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp_final = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(lp.toString() + e.toString());
Nodo nodoLoop = new Nodo ("loop");
nodoLoop.setNumNodo(parser.contador++);
nodoLoop.addHijo((Nodo) c);
RESULT = nodoLoop;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("loop_func",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // while_loop ::= error condicion_if LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cond_whileleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cond_whileright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object cond_while = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
     parser.errores.add("Palabra while faltante " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("while_loop",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // while_loop ::= WHILE condicion_if LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cond_whileleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cond_whileright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object cond_while = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(wh.toString() + lp.toString() + e.toString() + lp1.toString() + semi.toString());
Nodo nodoWhile = new Nodo("while");
nodoWhile.setNumNodo(parser.contador++);
nodoWhile.addHijo((Nodo) cond_while);
nodoWhile.addHijo((Nodo) c);
RESULT = nodoWhile;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("while_loop",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // for_loop ::= FOR ID IN operando1 DOSPUNTOS operando1 LOOP cuerpo END error SEMICOLON 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    parser.errores.add("End Loop faltante " + " |linea "+(rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // for_loop ::= FOR ID IN operando1 DOSPUNTOS operando1 LOOP cuerpo END LOOP error 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Fin de linea [;] esperado " + " |linea "+(rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // for_loop ::= FOR ID IN operando1 DOSPUNTOS operando1 error cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Palabra Loop faltante" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // for_loop ::= error FOR ID IN operando1 operando1 LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Simbolo [..] faltante entre operandos" + " | linea " + (rright+1) + " columna " +(rleft+4) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // for_loop ::= FOR ID error operando1 DOSPUNTOS operando1 LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int puntosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int puntosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object puntos = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    System.out.println("Palabra in faltante para for");
    parser.errores.add("Palabra in faltante para for" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // for_loop ::= FOR error IN operando1 DOSPUNTOS operando1 LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int puntosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int puntosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object puntos = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    System.out.println("Entra for sin id");
    parser.errores.add("Id faltante para for" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // for_loop ::= error ID IN operando1 DOSPUNTOS operando1 LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int puntosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int puntosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object puntos = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    System.out.println("Entra for sin cabaeza");
    parser.errores.add("Palabra for faltante " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // for_loop ::= FOR ID IN operando1 DOSPUNTOS operando1 LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int puntosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int puntosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object puntos = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoFor = new Nodo ("for");
nodoFor.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
nodoFor.addHijo((Nodo) hijoId);
nodoFor.addHijo((Nodo) op1);
nodoFor.addHijo((Nodo) op1_2);
nodoFor.addHijo((Nodo) c);
RESULT = nodoFor;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // get_function ::= GET PARIZQ ID error SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Parentesis derecho[)] faltante " + " | linea " + (rright+1) + " columna " +(rleft) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get_function",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // get_function ::= GET error ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Parentesis izquierdo[(] faltante " + " | linea " + (rright+1) + " columna " +(rleft) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get_function",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // get_function ::= PARIZQ error ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Palabra reservada faltante " + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get_function",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // get_function ::= GET PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoGet = new Nodo("get");
nodoGet.setNumNodo(parser.contador++);
nodoGet.setValor(id.toString());
RESULT = nodoGet;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get_function",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // valores_funcion ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // valores_funcion ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // valores_funcion ::= NUMFLOAT 
            {
              Object RESULT =null;
		int nfloatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nfloatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nfloat = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_float");
tmp.setValor(nfloat.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // valores_funcion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // valores_funcion ::= NUMINT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_int");
tmp.setValor(num.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // repeticion_parametros ::= valores_funcion 
            {
              Object RESULT =null;
		int vfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ();
tmp = (Nodo) vf;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // repeticion_parametros ::= valores_funcion COMA repeticion_parametros 
            {
              Object RESULT =null;
		int vfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int repParamleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int repParamright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object repParam = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo (",");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) vf);
tmp.addHijo((Nodo) repParam);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // llamado_funcion ::= ID PARIZQ repeticion_parametros error 
            {
              Object RESULT =null;
		int rep_paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rep_paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object rep_param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis derecho [)] esperado " + " | linea " + (rright+1) + " columna " +(rleft-2) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamado_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // llamado_funcion ::= ID repeticion_parametros PARDER error 
            {
              Object RESULT =null;
		int rep_paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rep_paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rep_param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_der = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis izquierdo [(] esperado " + " | linea " + (rright+1) + " columna " +(rleft-2) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamado_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // llamado_funcion ::= PARIZQ repeticion_parametros PARDER error 
            {
              Object RESULT =null;
		int par_izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rep_paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rep_paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rep_param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_der = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Id de llamado de funcion faltante " + " | linea " + (rright+1) + " columna " +(rleft-2) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamado_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // llamado_funcion ::= ID PARIZQ repeticion_parametros PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int par_izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int par_izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object par_izq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rep_paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rep_paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object rep_param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int par_derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int par_derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object par_der = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("llamado_funcion");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo ("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
tmp.addHijo((Nodo) rep_param);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamado_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // put_function ::= PUT PARIZQ llamado_funcion PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoPut = new Nodo("put");
nodoPut.setNumNodo(parser.contador++);
Nodo tmp2 = (Nodo) llamadoF;
nodoPut.setValor(tmp2.getValor());
RESULT = nodoPut;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // put_function ::= PUT PARIZQ valores_numericos_booleanos PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoPut = new Nodo ("put");
nodoPut.setNumNodo(parser.contador++);
Nodo tmp2 = (Nodo) valNumBool;
nodoPut.setValor(tmp2.getValor());
RESULT = nodoPut;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // put_function ::= PUT PARIZQ llamado_funcion PARDER error 
            {
              Object RESULT =null;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // put_function ::= PUT PARIZQ valores_numericos_booleanos PARDER error 
            {
              Object RESULT =null;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // put_function ::= PUT PARIZQ STRING PARDER error 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // put_function ::= PUT PARIZQ error PARDER SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Valor esperado para el put" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // put_function ::= PUT PARIZQ llamado_funcion error SEMICOLON 
            {
              Object RESULT =null;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis derecho [)] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // put_function ::= PUT error llamado_funcion PARDER SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis izquierdo [(] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // put_function ::= error PARIZQ llamado_funcion PARDER SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra put esperada" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // put_function ::= PUT PARIZQ valores_numericos_booleanos error SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis derecho [)] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // put_function ::= PUT error valores_numericos_booleanos PARDER SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis izquierdo [(] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // put_function ::= error PARIZQ valores_numericos_booleanos PARDER SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra put esperada" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // put_function ::= PUT PARIZQ STRING error SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis derecho [)] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // put_function ::= PUT error STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis izquierdo [(] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // put_function ::= error PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra put esperada" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // put_function ::= PUT PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoPut = new Nodo ("put");
nodoPut.setNumNodo(parser.contador++);
nodoPut.setValor(cadena.toString().substring(1, cadena.toString().length() - 1));
RESULT = nodoPut;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // bloque_if ::= IF condicion_if THEN cuerpo END IF SEMICOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cond_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cond_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object cond_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int end_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int end_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int if1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object if1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra if elsif");
Nodo hijoIf = new Nodo ("if-then");
hijoIf.setNumNodo(parser.contador++);
hijoIf.addHijo((Nodo) cond_if);
hijoIf.addHijo((Nodo) c);
RESULT = hijoIf;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque_if",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // bloque_if ::= error condicion_if THEN cuerpo elseif_else 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cond_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cond_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object cond_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int el_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int el_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object el_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra reservada faltante" + " | linea " + (rright+1) + " columna " +(rleft) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque_if",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bloque_if ::= IF condicion_if THEN cuerpo elseif_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cond_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cond_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object cond_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int el_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int el_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object el_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra if elsif");
Nodo hijoIf = new Nodo ("if-then");
hijoIf.setNumNodo(parser.contador++);
hijoIf.addHijo((Nodo) cond_if);
hijoIf.addHijo((Nodo) c);
hijoIf.addHijo((Nodo) el_if);
RESULT = hijoIf;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque_if",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // elseif_else ::= ELSE cuerpo END IF SEMICOLON 
            {
              Object RESULT =null;
		int else1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object else1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int end_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int end_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int if2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int if2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object if2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra if con else");
Nodo hijoElse = new Nodo ("else");
hijoElse.setNumNodo(parser.contador++);
hijoElse.addHijo((Nodo) c);
RESULT = hijoElse;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elseif_else",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // elseif_else ::= ELSIF condicion_if THEN cuerpo elseif_else 
            {
              Object RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cond_elifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cond_elifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object cond_elif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int elif_elseleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elif_elseright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elif_else = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra elsif");
Nodo elsif = new Nodo ("elsif-then");
elsif.setNumNodo(parser.contador++);
elsif.addHijo((Nodo) cond_elif);
elsif.addHijo((Nodo) c);
elsif.addHijo((Nodo) elif_else);
RESULT = elsif;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elseif_else",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // condicion_if ::= error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
   parser.errores.add(" Error de operadores de condicion "+" | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // condicion_if ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(f.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // condicion_if ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(t.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // condicion_if ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("id");
tmp.setNumNodo(parser.contador++);
tmp.setValor(id.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // condicion_if ::= operando1 error operando1 op_logicos condicion_if 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicional = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int condIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
   parser.errores.add(" Falta operador relacional "+" | linea" + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;  

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // condicion_if ::= operando1 error operando1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
   parser.errores.add(" Falta operador relacional "+" | linea" + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;  

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // condicion_if ::= operando1 OPREL operando1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo hijoOprel = new Nodo (oprel.toString());
hijoOprel.setNumNodo(parser.contador++);
hijoOprel.addHijo((Nodo) op1);
hijoOprel.addHijo((Nodo) op2);
RESULT = hijoOprel;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // condicion_if ::= operando1 OPREL operando1 op_logicos condicion_if 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicional = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int condIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(oprel.toString() + condicional.toString());
Nodo opLogico = (Nodo) condicional;
opLogico.setNumNodo(parser.contador++);
Nodo hijoOprel = new Nodo (oprel.toString());
hijoOprel.setNumNodo(parser.contador++);
hijoOprel.addHijo((Nodo) op1);
hijoOprel.addHijo((Nodo) op2);
opLogico.addHijo((Nodo) hijoOprel);
opLogico.addHijo((Nodo) condIf);
RESULT = opLogico;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // op_logicos ::= error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add(" Operador logico esperado " +"| linea "+ (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_logicos",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // op_logicos ::= OR 
            {
              Object RESULT =null;
		
Nodo tmp = new Nodo("or");
tmp.setNumNodo(parser.contador++);
RESULT=tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_logicos",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // op_logicos ::= AND 
            {
              Object RESULT =null;
		
Nodo tmp = new Nodo("and");
tmp.setNumNodo(parser.contador++);
RESULT=tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_logicos",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operando1 ::= NUMFLOAT 
            {
              Object RESULT =null;
		int nfloatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nfloatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nfloat = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_float");
tmp.setValor(nfloat.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operando1 ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(f.toString());
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(f.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operando1 ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(t.toString());
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(t.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operando1 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString());
Nodo tmp = new Nodo ("id");
tmp.setNumNodo(parser.contador++);
tmp.setValor(id.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operando1 ::= NUMINT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(num.toString());
Nodo tmp = new Nodo ("num");
tmp.setNumNodo(parser.contador++);
tmp.setValor(num.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // fin_cuerpo ::= RETURN valores_numericos_booleanos error 
            {
              Object RESULT =null;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado" + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // fin_cuerpo ::= error valores_numericos_booleanos SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semiRTleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiRTright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semiRT = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Return no encontrado" + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // fin_cuerpo ::= RETURN valores_numericos_booleanos SEMICOLON 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semiRTleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiRTright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semiRT = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
Nodo hijoReturn = new Nodo("return");
hijoReturn.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoReturn);
tmp.addHijo((Nodo) valNumBool);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // fin_cuerpo ::= exit_when 
            {
              Object RESULT =null;
		int exitWhenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exitWhenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exitWhen = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) exitWhen;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo; 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // fin_cuerpo ::= llamado_funcion error 
            {
              Object RESULT =null;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado" + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // fin_cuerpo ::= llamado_funcion SEMICOLON 
            {
              Object RESULT =null;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) llamadoF;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // fin_cuerpo ::= BEG 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) b;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // fin_cuerpo ::= asignar_valor 
            {
              Object RESULT =null;
		int asignarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int asignarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object asignar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) asignar;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // fin_cuerpo ::= bloque_if 
            {
              Object RESULT =null;
		int bloqueIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bloqueIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bloqueIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) bloqueIf;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // fin_cuerpo ::= get_function 
            {
              Object RESULT =null;
		int getFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int getFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object getFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) getFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // fin_cuerpo ::= put_function 
            {
              Object RESULT =null;
		int putFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int putFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object putFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) putFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // fin_cuerpo ::= loop_func 
            {
              Object RESULT =null;
		int loopFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int loopFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object loopFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) loopFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // fin_cuerpo ::= while_loop 
            {
              Object RESULT =null;
		int whileLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int whileLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object whileLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) whileLoop;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // fin_cuerpo ::= for_loop 
            {
              Object RESULT =null;
		int forLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int forLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object forLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) forLoop;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cuerpo ::= error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Cuerpo no puede ser vacio " +" | linea "+ (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpo ::= fin_cuerpo 
            {
              Object RESULT =null;
		int fcuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fcuerporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fcuerpo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = fcuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cuerpo ::= exit_when cuerpo 
            {
              Object RESULT =null;
		int exitWhenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exitWhenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exitWhen = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) exitWhen);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cuerpo ::= llamado_funcion error cuerpo 
            {
              Object RESULT =null;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " +" | linea"+ (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cuerpo ::= llamado_funcion SEMICOLON cuerpo 
            {
              Object RESULT =null;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) llamadoF);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cuerpo ::= asignar_valor cuerpo 
            {
              Object RESULT =null;
		int asignarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) asignar);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cuerpo ::= BEG cuerpo 
            {
              Object RESULT =null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object begin = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) begin);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpo ::= get_function cuerpo 
            {
              Object RESULT =null;
		int getFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int getFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object getFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) getFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cuerpo ::= put_function cuerpo 
            {
              Object RESULT =null;
		int putFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int putFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object putFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) putFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpo ::= bloque_if cuerpo 
            {
              Object RESULT =null;
		int bloqueIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bloqueIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bloqueIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) bloqueIf);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpo ::= RETURN valores_numericos_booleanos error cuerpo 
            {
              Object RESULT =null;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " +" | linea"+ (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpo ::= error valores_numericos_booleanos SEMICOLON cuerpo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semiRTleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiRTright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semiRT = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Return no encontrado" + " | linea"+(rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpo ::= RETURN valores_numericos_booleanos SEMICOLON cuerpo 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semiRTleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiRTright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semiRT = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
Nodo hijoReturn = new Nodo("return");
hijoReturn.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoReturn);
tmp.addHijo((Nodo) valNumBool);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo ::= loop_func cuerpo 
            {
              Object RESULT =null;
		int loopFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int loopFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object loopFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) loopFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo ::= while_loop cuerpo 
            {
              Object RESULT =null;
		int whileLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int whileLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object whileLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) whileLoop);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo ::= for_loop cuerpo 
            {
              Object RESULT =null;
		int forLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int forLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object forLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra for cuerpo");
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) forLoop);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BEG ::= BEGIN cuerpo END end_id SEMICOLON 
            {
              Object RESULT =null;
		int bgnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bgnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bgn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int endIdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int endIdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object endId = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("Beg");
tmp.setNumNodo(parser.contador++);
Nodo hijo = new Nodo("begin");
hijo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijo);
tmp.addHijo((Nodo) c);
Nodo hijoEnd = new Nodo("end");
hijoEnd.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoEnd);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEG",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asignar_valor ::= ID ASIGNACION S SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
tmp.addHijo((Nodo) s1);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asignar_valor ::= ID ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString() + asignacion.toString() + f.toString());
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
Nodo hijoFalse = new Nodo("boolean");
hijoFalse.setNumNodo(parser.contador++);
hijoFalse.setValor(f.toString());
tmp.addHijo((Nodo) hijoFalse);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asignar_valor ::= ID ASIGNACION FALSE error 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignar_valor ::= ID error FALSE SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Simbolo asignacion esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignar_valor ::= error ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Asignacion sin id " + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // asignar_valor ::= ID error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Uso de variable no apropiado" +" | linea "+ (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // asignar_valor ::= ID error SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    parser.errores.add("Uso de variable no apropiado" +" | linea "+ (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // asignar_valor ::= ID ASIGNACION error SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    parser.errores.add("Valor esperado para asignacion" +" | linea "+ (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // asignar_valor ::= ID ASIGNACION TRUE error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignar_valor ::= ID error TRUE SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Simbolo asignacion esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignar_valor ::= error ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
    parser.errores.add("Asignacion sin id " + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignar_valor ::= ID ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
Nodo hijoTrue = new Nodo("boolean");
hijoTrue.setNumNodo(parser.contador++);
hijoTrue.setValor(t.toString());
tmp.addHijo((Nodo) hijoTrue);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Variables ::= PROCEDURE ID IS BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Variables ::= PROCEDURE ID IS Variables BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) v1);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Variables ::= funcion parametros_funcion BEG 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int pmFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pmFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object pmF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo funcion = (Nodo) func;
funcion.setNumNodo(parser.contador++);
funcion.addHijo((Nodo) pmF);
funcion.addHijo((Nodo) b);
RESULT = funcion;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setNumNodo(parser.contador++);
tipo.setValor(tp.toString());
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo)inicializar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE error 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Variables ::= repeticion_id DECLARACION error SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variable esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Variables ::= repeticion_id TIPOVARIABLE error SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Simbolo declaracion esperado " + " | linea " + (rright+1) + " columna " +(rleft) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setNumNodo(parser.contador++);
tipo.setValor(tp.toString());
tmp.addHijo((Nodo) tipo);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Variables ::= PROCEDURE error IS BEG 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Identificador esperado para procedure" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Variables ::= PROCEDURE ID error BEG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra reservaba [is] esperada" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Variables ::= ID error IS BEG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Identificador sin procedure" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Variables ::= PROCEDURE error IS Variables BEG 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Identificador esperado para procedure" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Variables ::= PROCEDURE ID error Variables BEG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra reservaba [is] esperada" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Variables ::= ID error IS Variables BEG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Identificador sin procedure" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Variables ::= PROCEDURE error IS Variables BEG Variables 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Identificador esperadao para procedure" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Variables ::= PROCEDURE ID error Variables BEG Variables 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra reservaba [is] esperada" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Variables ::= ID error IS Variables BEG Variables 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Identificador sin procedure" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Variables ::= PROCEDURE ID IS Variables BEG Variables 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) v1);
procedure.addHijo((Nodo) b);
tmp.addHijo((Nodo) v2);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Variables ::= funcion parametros_funcion BEG Variables 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int pmFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int pmFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object pmF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo funcion = (Nodo) func;
funcion.addHijo((Nodo) pmF);
funcion.addHijo((Nodo) b);
tmp.addHijo((Nodo) funcion);
tmp.addHijo((Nodo) v);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE error asignar_valor_variables Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Variables ::= repeticion_id DECLARACION error asignar_valor_variables SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variable esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Variables ::= repeticion_id TIPOVARIABLE error asignar_valor_variables SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Simbolo declaracion esperado" + " | linea " + (rright+1) + " columna " +(rleft) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo)inicializar);
tmp.addHijo((Nodo) v);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE error Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Variables ::= repeticion_id DECLARACION error SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variable esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Variables ::= repeticion_id TIPOVARIABLE error SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Simbolo declaracion esperado" + " | linea " + (rright+1) + " columna " +(rleft) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo) v);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE error asignar_valor_variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " + " | linea " + (rright+1) + " columna " +(rleft+2) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_funcion ::= repeticion_id DECLARACION error asignar_valor_variables SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variables esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_funcion ::= repeticion_id TIPOVARIABLE asignar_valor_variables error SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Simbolo declaracion esperado" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables parametros_funcion error 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " + " | linea " + (rright) + " columna " +(rleft) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_funcion ::= repeticion_id DECLARACION error asignar_valor_variables SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variables esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_funcion ::= repeticion_id TIPOVARIABLE error asignar_valor_variables SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Simbolo declaracion esperado" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE error 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros_funcion ::= repeticion_id DECLARACION error SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variables esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_funcion ::= repeticion_id TIPOVARIABLE error SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Simbolo declaracion esperado" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE error parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado " + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros_funcion ::= repeticion_id DECLARACION error SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variables esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros_funcion ::= repeticion_id TIPOVARIABLE error SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Simbolo declaracion esperado" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
tmp.addHijo((Nodo) paramF);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra");
Nodo tmp = new Nodo("declaracion_variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) paramF);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON parametros_obligatorios 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pm_oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pm_oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pm_o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
tmp.addHijo((Nodo) pm_o);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE parametros_obligatorios error 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Fin de linea [;] esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_obligatorios ::= repeticion_id TIPOVARIABLE error 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("simbolo declaracion esperado" + " | linea "+(rright+1)+" columna "+(rleft-1)+" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_obligatorios ::= repeticion_id DECLARACION error 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variable esperado" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON parametros_obligatorios 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pm_oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pm_oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pm_o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) pm_o);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= FUNCTION ID PARIZQ parametros_obligatorios PARDER RETURN TIPOVARIABLE error 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra is esperada para funcion" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");
        Nodo errorcito= new Nodo("error");
    RESULT = errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= FUNCTION ID PARIZQ parametros_obligatorios PARDER RETURN IS error 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Tipo de variable de retorno esperado para funcion" + " | linea " + (rright+1) + " columna " +(rleft) +" |");
        Nodo errorcito= new Nodo("error");
    RESULT = errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcion ::= FUNCTION ID PARIZQ parametros_obligatorios PARDER TIPOVARIABLE IS error 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("return esperado para funcion" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");
        Nodo errorcito= new Nodo("error");
    RESULT = errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcion ::= FUNCTION ID PARIZQ parametros_obligatorios RETURN TIPOVARIABLE IS error 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis [)] esperado" + " | linea " + (rright+1) + " columna " +(rleft-2) +" |");
        Nodo errorcito= new Nodo("error");
    RESULT = errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcion ::= FUNCTION ID error parametros_obligatorios PARDER RETURN TIPOVARIABLE IS 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Parentesis [(] esperado" + " | linea " + (rright+1) + " columna " +(rleft) +" |");
    Nodo errorcito= new Nodo("error");
    RESULT =errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcion ::= FUNCTION error PARIZQ parametros_obligatorios PARDER RETURN TIPOVARIABLE IS 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Id esperado para function" + " | linea " + (rright+1) + " columna " +(rleft) +" |");
    Nodo errorcito= new Nodo("error");
    RESULT =errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion ::= error ID PARIZQ parametros_obligatorios PARDER RETURN TIPOVARIABLE IS 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Palabra reservada function esperada" + " | linea " + (rright+1) + " columna " +(rleft) +" |");  
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion ::= FUNCTION ID PARIZQ parametros_obligatorios PARDER RETURN TIPOVARIABLE IS 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("declaracion_funcion");
tmp.setNumNodo(parser.contador++);
Nodo hijoFuncion = new Nodo("function");
hijoFuncion.setNumNodo(parser.contador++);
hijoFuncion.setValor(id.toString());
tmp.addHijo((Nodo) hijoFuncion);
tmp.addHijo((Nodo) pm);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignar_valor_variables ::= ASIGNACION error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Valor esperado para asignacion" + " | linea " + (rright+1) + " columna " +(rleft-1) +" |");
    Nodo errorcito= new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignar_valor_variables ::= ASIGNACION FALSE 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
System.out.println(asignacion.toString() + f.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignar_valor_variables ::= ASIGNACION TRUE 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
System.out.println(asignacion.toString() + t.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignar_valor_variables ::= ASIGNACION S 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = s;
System.out.println(asignacion.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // repeticion_id ::= ID error repeticion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    parser.errores.add("Coma esperada antes de id" + " | linea " + (rright+1) + " columna " +(rleft) +" |");
    Nodo errorcito=new Nodo("error");
    RESULT=errorcito;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_id",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // repeticion_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo hijo = new Nodo("id");
hijo.setNumNodo(parser.contador++);
hijo.setValor(id.toString());
RESULT = hijo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_id",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // repeticion_id ::= ID COMA repeticion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString() + coma.toString() + "2. declaracion_id");
Nodo tmp = new Nodo(",");
tmp.setNumNodo(parser.contador++);
Nodo hijo = new Nodo("id");
hijo.setValor(id.toString());
hijo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)hijo);
tmp.addHijo((Nodo)rep_id);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_id",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valores_numericos_booleanos ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valores_numericos_booleanos ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valores_numericos_booleanos ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valores_numericos_booleanos ::= NUMFLOAT 
            {
              Object RESULT =null;
		int num_floatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num_floatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num_float = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_float");
tmp.setValor(num_float.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valores_numericos_booleanos ::= NUMINT 
            {
              Object RESULT =null;
		int num_Intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num_Intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num_Int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_int");
tmp.setValor(num_Int.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // F ::= PARIZQ E PARDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
RESULT = e;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // F ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // F ::= NUMFLOAT 
            {
              Object RESULT =null;
		int num_floatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num_floatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num_float = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("numfloat");
tmp.setValor(num_float.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // F ::= NUMINT 
            {
              Object RESULT =null;
		int num_Intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num_Intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num_Int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_int");
tmp.setValor(num_Int.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = f;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // T ::= T OPMULTIPLICACION F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo(op.toString(),opleft+1,opright+1);
Nodo n1 = ((Nodo)a);
Nodo n2 =((Nodo)b);
n1.setNumNodo(parser.contador++);
n2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)n1);
tmp.addHijo((Nodo)n2);
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= T 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = b;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= E OPSUMA T 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo(op.toString(),opleft+1,opright+1);
Nodo n1 = ((Nodo)a);
Nodo n2 =((Nodo)b);
n1.setNumNodo(parser.contador++);
n2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)n1);
tmp.addHijo((Nodo)n2);
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = e;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // end_id ::= 
            {
              Object RESULT =null;
		
RESULT = "";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("end_id",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // end_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = id;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("end_id",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inicio ::= PROCEDURE ID error BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Palabra reservada [is] esperada" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");
RESULT="";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inicio ::= error PROCEDURE ID IS 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Procedure sin begin" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");
RESULT="";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inicio ::= error PROCEDURE ID IS Variables 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Procedure sin begin" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");
RESULT="";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inicio ::= PROCEDURE error IS BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Procedure sin identificador" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");
RESULT="";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inicio ::= PROCEDURE ID error Variables BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Palabra reservada [is] esperada" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");
RESULT="";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inicio ::= PROCEDURE error IS Variables BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Procedure sin identificador" + " | linea " + (rright+1) + " columna " +(rleft+1) +" |");
RESULT="";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inicio ::= PROCEDURE ID IS BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("Inicio");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
procedure.addHijo((Nodo) hijoId);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= error ID IS Variables BEG 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Identificador sin procedure" + " | linea " + (rright+1) + " columna " +(rleft) +" |");
RESULT="";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error ID IS BEG 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
parser.errores.add("Identificador sin procedure" + " | linea " + (rright+1) + " columna " +(rleft) +" |");
RESULT="";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= PROCEDURE ID IS Variables BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("Inicio");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
Nodo prueba = (Nodo) var;
procedure.addHijo((Nodo) prueba);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

