
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 26 04:54:15 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 26 04:54:15 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\006\000\002\021\003\000\002\021\002" +
    "\000\002\026\003\000\002\031\005\000\002\031\003\000" +
    "\002\027\005\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\020\005\000\002\020\003\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\025\012\000\002\034\006\000\002\034\007\000\002\034" +
    "\005\000\002\034\006\000\002\032\007\000\002\032\010" +
    "\000\002\032\007\000\002\032\006\000\002\003\007\000" +
    "\002\003\010\000\002\003\006\000\002\003\010\000\002" +
    "\003\006\000\002\003\007\000\002\003\005\000\002\003" +
    "\007\000\002\003\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\004\007\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\006\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\005\000\002\022\004" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\004\000\002\023\003\000\002\023\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\040\003\000\002\040\003\000\002" +
    "\007\007\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\007" +
    "\000\002\010\007\000\002\006\007\000\002\006\011\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\037\006\000\002\036\005\000\002\036\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\012\007\000\002\013\015\000" +
    "\002\014\011\000\002\015\007\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\003\005\004\004\001\002\000\004\005" +
    "\321\001\002\000\004\005\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\007\011\001" +
    "\002\000\010\004\014\005\012\046\016\001\002\000\006" +
    "\010\uffec\042\317\001\002\000\004\010\310\001\002\000" +
    "\004\005\302\001\002\000\004\005\012\001\002\000\004" +
    "\005\246\001\002\000\004\012\021\001\002\000\004\002" +
    "\uffff\001\002\000\026\005\035\012\021\015\033\026\036" +
    "\031\046\032\045\035\030\036\026\037\022\045\031\001" +
    "\002\000\004\040\243\001\002\000\034\005\035\012\021" +
    "\014\uffc5\015\033\022\uffc5\025\uffc5\026\036\031\046\032" +
    "\045\035\030\036\026\037\022\045\031\001\002\000\004" +
    "\014\236\001\002\000\010\014\uffc7\022\uffc7\025\uffc7\001" +
    "\002\000\016\005\157\017\162\020\163\027\161\047\061" +
    "\050\056\001\002\000\034\005\035\012\021\014\uffc0\015" +
    "\033\022\uffc0\025\uffc0\026\036\031\046\032\045\035\030" +
    "\036\026\037\022\045\031\001\002\000\026\005\035\012" +
    "\021\015\033\026\036\031\046\032\045\035\030\036\026" +
    "\037\022\045\031\001\002\000\014\005\217\017\106\020" +
    "\110\047\105\050\102\001\002\000\004\006\215\001\002" +
    "\000\016\005\157\017\162\020\163\027\161\047\061\050" +
    "\056\001\002\000\034\005\035\012\021\014\uffbd\015\033" +
    "\022\uffbd\025\uffbd\026\036\031\046\032\045\035\030\036" +
    "\026\037\022\045\031\001\002\000\006\027\117\041\132" +
    "\001\002\000\004\027\100\001\002\000\034\005\035\012" +
    "\021\014\uffbf\015\033\022\uffbf\025\uffbf\026\036\031\046" +
    "\032\045\035\030\036\026\037\022\045\031\001\002\000" +
    "\034\005\035\012\021\014\uffc3\015\033\022\uffc3\025\uffc3" +
    "\026\036\031\046\032\045\035\030\036\026\037\022\045" +
    "\031\001\002\000\034\005\035\012\021\014\uffc2\015\033" +
    "\022\uffc2\025\uffc2\026\036\031\046\032\045\035\030\036" +
    "\026\037\022\045\031\001\002\000\034\005\035\012\021" +
    "\014\uffc1\015\033\022\uffc1\025\uffc1\026\036\031\046\032" +
    "\045\035\030\036\026\037\022\045\031\001\002\000\034" +
    "\005\035\012\021\014\uffc6\015\033\022\uffc6\025\uffc6\026" +
    "\036\031\046\032\045\035\030\036\026\037\022\045\031" +
    "\001\002\000\034\005\035\012\021\014\uffc4\015\033\022" +
    "\uffc4\025\uffc4\026\036\031\046\032\045\035\030\036\026" +
    "\037\022\045\031\001\002\000\004\005\053\001\002\000" +
    "\004\027\047\001\002\000\004\005\050\001\002\000\004" +
    "\030\051\001\002\000\004\006\052\001\002\000\034\005" +
    "\uff9f\012\uff9f\014\uff9f\015\uff9f\022\uff9f\025\uff9f\026\uff9f" +
    "\031\uff9f\032\uff9f\035\uff9f\036\uff9f\037\uff9f\045\uff9f\001" +
    "\002\000\004\033\054\001\002\000\014\005\055\017\060" +
    "\020\062\047\061\050\056\001\002\000\020\006\uffba\021" +
    "\uffba\023\uffba\024\uffba\030\uffba\034\uffba\035\uffba\001\002" +
    "\000\022\006\uffb7\016\uffb7\021\uffb7\023\uffb7\024\uffb7\030" +
    "\uffb7\034\uffb7\035\uffb7\001\002\000\004\034\063\001\002" +
    "\000\020\006\uffb9\021\uffb9\023\uffb9\024\uffb9\030\uffb9\034" +
    "\uffb9\035\uffb9\001\002\000\022\006\uffbb\016\uffbb\021\uffbb" +
    "\023\uffbb\024\uffbb\030\uffbb\034\uffbb\035\uffbb\001\002\000" +
    "\020\006\uffb8\021\uffb8\023\uffb8\024\uffb8\030\uffb8\034\uffb8" +
    "\035\uffb8\001\002\000\014\005\055\017\060\020\062\047" +
    "\061\050\056\001\002\000\004\035\065\001\002\000\026" +
    "\005\035\012\021\015\033\026\036\031\046\032\045\035" +
    "\030\036\026\037\022\045\031\001\002\000\004\014\067" +
    "\001\002\000\004\035\070\001\002\000\004\006\071\001" +
    "\002\000\034\005\uff9e\012\uff9e\014\uff9e\015\uff9e\022\uff9e" +
    "\025\uff9e\026\uff9e\031\uff9e\032\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\045\uff9e\001\002\000\010\014\uffd0\022\uffd0\025\uffd0" +
    "\001\002\000\010\014\uffd2\022\uffd2\025\uffd2\001\002\000" +
    "\010\014\uffce\022\uffce\025\uffce\001\002\000\010\014\uffcc" +
    "\022\uffcc\025\uffcc\001\002\000\010\014\uffcd\022\uffcd\025" +
    "\uffcd\001\002\000\010\014\uffcb\022\uffcb\025\uffcb\001\002" +
    "\000\016\005\101\013\104\017\106\020\110\047\105\050" +
    "\102\001\002\000\006\027\117\030\ufff0\001\002\000\006" +
    "\006\ufff1\030\ufff1\001\002\000\004\030\115\001\002\000" +
    "\004\030\113\001\002\000\006\006\ufff2\030\ufff2\001\002" +
    "\000\006\006\uffee\030\uffee\001\002\000\004\030\111\001" +
    "\002\000\006\006\uffef\030\uffef\001\002\000\004\006\112" +
    "\001\002\000\034\005\uffa8\012\uffa8\014\uffa8\015\uffa8\022" +
    "\uffa8\025\uffa8\026\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\045\uffa8\001\002\000\004\006\114\001\002\000" +
    "\034\005\uffaa\012\uffaa\014\uffaa\015\uffaa\022\uffaa\025\uffaa" +
    "\026\uffaa\031\uffaa\032\uffaa\035\uffaa\036\uffaa\037\uffaa\045" +
    "\uffaa\001\002\000\004\006\116\001\002\000\034\005\uffa9" +
    "\012\uffa9\014\uffa9\015\uffa9\022\uffa9\025\uffa9\026\uffa9\031" +
    "\uffa9\032\uffa9\035\uffa9\036\uffa9\037\uffa9\045\uffa9\001\002" +
    "\000\014\005\120\017\125\020\126\047\124\050\121\001" +
    "\002\000\006\030\uffa3\042\uffa3\001\002\000\006\030\uffa2" +
    "\042\uffa2\001\002\000\006\030\uffa5\042\130\001\002\000" +
    "\004\030\127\001\002\000\006\030\uffa4\042\uffa4\001\002" +
    "\000\006\030\uffa1\042\uffa1\001\002\000\006\030\uffa0\042" +
    "\uffa0\001\002\000\006\006\uffa7\030\uffa7\001\002\000\014" +
    "\005\120\017\125\020\126\047\124\050\121\001\002\000" +
    "\004\030\uffa6\001\002\000\016\005\141\017\133\020\136" +
    "\027\137\047\140\050\142\001\002\000\004\006\155\001" +
    "\002\000\014\005\ufff9\006\ufff9\030\ufff9\043\ufff9\044\147" +
    "\001\002\000\004\006\154\001\002\000\004\006\153\001" +
    "\002\000\012\005\141\027\137\047\140\050\142\001\002" +
    "\000\014\005\ufff6\006\ufff6\030\ufff6\043\ufff6\044\ufff6\001" +
    "\002\000\014\005\ufff4\006\ufff4\030\ufff4\043\ufff4\044\ufff4" +
    "\001\002\000\014\005\ufff5\006\ufff5\030\ufff5\043\ufff5\044" +
    "\ufff5\001\002\000\014\005\ufff7\006\ufff7\030\ufff7\043\ufff7" +
    "\044\ufff7\001\002\000\012\005\ufffb\006\ufffb\030\ufffb\043" +
    "\145\001\002\000\012\005\141\027\137\047\140\050\142" +
    "\001\002\000\014\005\ufffa\006\ufffa\030\ufffa\043\ufffa\044" +
    "\147\001\002\000\012\005\141\027\137\047\140\050\142" +
    "\001\002\000\014\005\ufff8\006\ufff8\030\ufff8\043\ufff8\044" +
    "\ufff8\001\002\000\006\030\152\043\145\001\002\000\014" +
    "\005\ufff3\006\ufff3\030\ufff3\043\ufff3\044\ufff3\001\002\000" +
    "\034\005\uffd5\012\uffd5\014\uffd5\015\uffd5\022\uffd5\025\uffd5" +
    "\026\uffd5\031\uffd5\032\uffd5\035\uffd5\036\uffd5\037\uffd5\045" +
    "\uffd5\001\002\000\034\005\uffd4\012\uffd4\014\uffd4\015\uffd4" +
    "\022\uffd4\025\uffd4\026\uffd4\031\uffd4\032\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\045\uffd4\001\002\000\034\005\uffd6\012\uffd6" +
    "\014\uffd6\015\uffd6\022\uffd6\025\uffd6\026\uffd6\031\uffd6\032" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\045\uffd6\001\002\000\010" +
    "\014\uffc8\022\uffc8\025\uffc8\001\002\000\014\006\uffb1\016" +
    "\uffba\021\uffb1\030\uffb1\035\uffb1\001\002\000\004\016\207" +
    "\001\002\000\016\005\157\017\162\020\163\027\161\047" +
    "\061\050\056\001\002\000\014\006\uffb0\016\uffb9\021\uffb0" +
    "\030\uffb0\035\uffb0\001\002\000\014\006\uffaf\016\uffb8\021" +
    "\uffaf\030\uffaf\035\uffaf\001\002\000\004\021\165\001\002" +
    "\000\026\005\035\012\021\015\033\026\036\031\046\032" +
    "\045\035\030\036\026\037\022\045\031\001\002\000\010" +
    "\014\172\022\171\025\167\001\002\000\026\005\035\012" +
    "\021\015\033\026\036\031\046\032\045\035\030\036\026" +
    "\037\022\045\031\001\002\000\034\005\uffac\012\uffac\014" +
    "\uffac\015\uffac\022\uffac\025\uffac\026\uffac\031\uffac\032\uffac" +
    "\035\uffac\036\uffac\037\uffac\045\uffac\001\002\000\016\005" +
    "\157\017\162\020\163\027\161\047\061\050\056\001\002" +
    "\000\004\015\173\001\002\000\004\006\174\001\002\000" +
    "\034\005\uffab\012\uffab\014\uffab\015\uffab\022\uffab\025\uffab" +
    "\026\uffab\031\uffab\032\uffab\035\uffab\036\uffab\037\uffab\045" +
    "\uffab\001\002\000\004\021\176\001\002\000\026\005\035" +
    "\012\021\015\033\026\036\031\046\032\045\035\030\036" +
    "\026\037\022\045\031\001\002\000\006\022\171\025\167" +
    "\001\002\000\034\005\uffae\012\uffae\014\uffae\015\uffae\022" +
    "\uffae\025\uffae\026\uffae\031\uffae\032\uffae\035\uffae\036\uffae" +
    "\037\uffae\045\uffae\001\002\000\004\014\202\001\002\000" +
    "\004\015\203\001\002\000\004\006\204\001\002\000\034" +
    "\005\uffad\012\uffad\014\uffad\015\uffad\022\uffad\025\uffad\026" +
    "\uffad\031\uffad\032\uffad\035\uffad\036\uffad\037\uffad\045\uffad" +
    "\001\002\000\004\030\206\001\002\000\012\006\uffb3\021" +
    "\uffb3\030\uffb3\035\uffb3\001\002\000\014\005\055\017\060" +
    "\020\062\047\061\050\056\001\002\000\016\006\uffb2\021" +
    "\uffb2\023\212\024\213\030\uffb2\035\uffb2\001\002\000\016" +
    "\005\157\017\162\020\163\027\161\047\061\050\056\001" +
    "\002\000\016\005\uffb6\017\uffb6\020\uffb6\027\uffb6\047\uffb6" +
    "\050\uffb6\001\002\000\016\005\uffb5\017\uffb5\020\uffb5\027" +
    "\uffb5\047\uffb5\050\uffb5\001\002\000\012\006\uffb4\021\uffb4" +
    "\030\uffb4\035\uffb4\001\002\000\034\005\035\012\021\014" +
    "\uffbe\015\033\022\uffbe\025\uffbe\026\036\031\046\032\045" +
    "\035\030\036\026\037\022\045\031\001\002\000\010\014" +
    "\uffc9\022\uffc9\025\uffc9\001\002\000\004\006\ufff0\001\002" +
    "\000\004\006\221\001\002\000\034\005\035\012\021\014" +
    "\uffbc\015\033\022\uffbc\025\uffbc\026\036\031\046\032\045" +
    "\035\030\036\026\037\022\045\031\001\002\000\010\014" +
    "\uffcf\022\uffcf\025\uffcf\001\002\000\004\014\224\001\002" +
    "\000\004\035\225\001\002\000\004\006\226\001\002\000" +
    "\034\005\uff9c\012\uff9c\014\uff9c\015\uff9c\022\uff9c\025\uff9c" +
    "\026\uff9c\031\uff9c\032\uff9c\035\uff9c\036\uff9c\037\uff9c\045" +
    "\uff9c\001\002\000\010\014\uffca\022\uffca\025\uffca\001\002" +
    "\000\004\035\231\001\002\000\026\005\035\012\021\015" +
    "\033\026\036\031\046\032\045\035\030\036\026\037\022" +
    "\045\031\001\002\000\004\014\233\001\002\000\004\035" +
    "\234\001\002\000\004\006\235\001\002\000\034\005\uff9d" +
    "\012\uff9d\014\uff9d\015\uff9d\022\uff9d\025\uff9d\026\uff9d\031" +
    "\uff9d\032\uff9d\035\uff9d\036\uff9d\037\uff9d\045\uff9d\001\002" +
    "\000\006\005\237\006\ufffc\001\002\000\004\006\ufffd\001" +
    "\002\000\004\006\241\001\002\000\042\002\uffd3\004\uffd3" +
    "\005\uffd3\012\uffd3\014\uffd3\015\uffd3\022\uffd3\025\uffd3\026" +
    "\uffd3\031\uffd3\032\uffd3\035\uffd3\036\uffd3\037\uffd3\045\uffd3" +
    "\046\uffd3\001\002\000\010\014\uffd1\022\uffd1\025\uffd1\001" +
    "\002\000\016\005\157\017\162\020\163\027\161\047\061" +
    "\050\056\001\002\000\004\006\245\001\002\000\034\005" +
    "\uff9b\012\uff9b\014\uff9b\015\uff9b\022\uff9b\025\uff9b\026\uff9b" +
    "\031\uff9b\032\uff9b\035\uff9b\036\uff9b\037\uff9b\045\uff9b\001" +
    "\002\000\004\027\247\001\002\000\004\005\012\001\002" +
    "\000\004\010\256\001\002\000\004\030\252\001\002\000" +
    "\004\045\253\001\002\000\004\011\254\001\002\000\004" +
    "\007\255\001\002\000\004\005\uffe8\001\002\000\004\011" +
    "\257\001\002\000\010\005\012\030\uffe5\041\260\001\002" +
    "\000\016\005\141\017\264\020\266\027\137\047\140\050" +
    "\142\001\002\000\004\030\uffe7\001\002\000\006\005\012" +
    "\030\uffe4\001\002\000\004\030\uffe6\001\002\000\010\005" +
    "\uffea\006\uffea\030\uffea\001\002\000\010\005\uffeb\006\uffeb" +
    "\030\uffeb\001\002\000\010\005\uffe9\006\uffe9\030\uffe9\001" +
    "\002\000\004\010\273\001\002\000\004\012\021\001\002" +
    "\000\012\004\014\005\012\012\uffd9\046\016\001\002\000" +
    "\004\012\uffdd\001\002\000\004\011\274\001\002\000\006" +
    "\006\275\041\260\001\002\000\006\005\012\012\uffe0\001" +
    "\002\000\004\006\277\001\002\000\006\005\012\012\uffe1" +
    "\001\002\000\004\012\uffe2\001\002\000\004\012\uffe3\001" +
    "\002\000\004\007\303\001\002\000\012\004\014\005\012" +
    "\012\021\046\016\001\002\000\004\012\uffd7\001\002\000" +
    "\004\012\021\001\002\000\012\004\014\005\012\012\uffd8" +
    "\046\016\001\002\000\004\012\uffdc\001\002\000\004\011" +
    "\311\001\002\000\006\006\312\041\260\001\002\000\012" +
    "\004\014\005\012\012\uffdb\046\016\001\002\000\004\006" +
    "\314\001\002\000\012\004\014\005\012\012\uffda\046\016" +
    "\001\002\000\004\012\uffde\001\002\000\004\012\uffdf\001" +
    "\002\000\004\005\012\001\002\000\004\010\uffed\001\002" +
    "\000\004\007\322\001\002\000\012\004\014\005\012\012" +
    "\021\046\016\001\002\000\004\002\ufffe\001\002\000\004" +
    "\012\021\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\016\020\012\025\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\266\032\267\001\001\000\002\001\001\000\004\004" +
    "\017\001\001\000\002\001\001\000\032\004\036\006\041" +
    "\011\037\012\040\013\042\014\022\015\043\016\033\017" +
    "\026\022\023\023\024\037\031\001\001\000\002\001\001" +
    "\000\032\004\036\006\041\011\037\012\040\013\042\014" +
    "\022\015\043\016\033\017\026\022\241\023\024\037\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\157\007\227\001\001\000\032\004\036\006\041\011\037" +
    "\012\040\013\042\014\022\015\043\016\033\017\026\022" +
    "\226\023\024\037\031\001\001\000\032\004\036\006\041" +
    "\011\037\012\040\013\042\014\022\015\043\016\033\017" +
    "\026\022\222\023\024\037\031\001\001\000\004\035\217" +
    "\001\001\000\002\001\001\000\006\005\157\007\163\001" +
    "\001\000\032\004\036\006\041\011\037\012\040\013\042" +
    "\014\022\015\043\016\033\017\026\022\155\023\024\037" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\036\006\041\011\037\012\040\013\042\014\022\015" +
    "\043\016\033\017\026\022\076\023\024\037\031\001\001" +
    "\000\032\004\036\006\041\011\037\012\040\013\042\014" +
    "\022\015\043\016\033\017\026\022\075\023\024\037\031" +
    "\001\001\000\032\004\036\006\041\011\037\012\040\013" +
    "\042\014\022\015\043\016\033\017\026\022\074\023\024" +
    "\037\031\001\001\000\032\004\036\006\041\011\037\012" +
    "\040\013\042\014\022\015\043\016\033\017\026\022\073" +
    "\023\024\037\031\001\001\000\032\004\036\006\041\011" +
    "\037\012\040\013\042\014\022\015\043\016\033\017\026" +
    "\022\072\023\024\037\031\001\001\000\032\004\036\006" +
    "\041\011\037\012\040\013\042\014\022\015\043\016\033" +
    "\017\026\022\071\023\024\037\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\063\001\001\000\002\001\001" +
    "\000\032\004\036\006\041\011\037\012\040\013\042\014" +
    "\022\015\043\016\033\017\026\022\065\023\024\037\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\102\037\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\121\036\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\121\036\130\001\001\000\002" +
    "\001\001\000\012\026\134\027\133\030\142\031\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\133\030\142\031\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\145\030" +
    "\142\001\001\000\002\001\001\000\004\030\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\157\007\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\036\006\041\011\037\012" +
    "\040\013\042\014\022\015\043\016\033\017\026\022\165" +
    "\023\024\037\031\001\001\000\004\010\167\001\001\000" +
    "\032\004\036\006\041\011\037\012\040\013\042\014\022" +
    "\015\043\016\033\017\026\022\200\023\024\037\031\001" +
    "\001\000\002\001\001\000\006\005\157\007\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\036\006\041\011\037\012\040" +
    "\013\042\014\022\015\043\016\033\017\026\022\176\023" +
    "\024\037\031\001\001\000\004\010\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\207\001\001\000\004\040\210\001\001\000" +
    "\006\005\157\007\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\036\006\041\011" +
    "\037\012\040\013\042\014\022\015\043\016\033\017\026" +
    "\022\215\023\024\037\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\036\006\041" +
    "\011\037\012\040\013\042\014\022\015\043\016\033\017" +
    "\026\022\221\023\024\037\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\036\006\041\011\037\012\040\013\042\014\022\015" +
    "\043\016\033\017\026\022\231\023\024\037\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\157\007\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\247\034\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\247\024\261\034\260\001\001" +
    "\000\012\026\264\027\133\030\142\031\143\001\001\000" +
    "\002\001\001\000\006\020\247\034\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\270\001\001\000\010" +
    "\003\271\020\012\025\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\275\001\001\000\006\020\266" +
    "\032\300\001\001\000\002\001\001\000\006\020\266\032" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\304\004\303\020\012\025\014\001" +
    "\001\000\002\001\001\000\004\004\305\001\001\000\010" +
    "\003\306\020\012\025\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\312\001\001\000\010\003\315" +
    "\020\012\025\014\001\001\000\002\001\001\000\010\003" +
    "\314\020\012\025\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\323\004\322\020\012\025\014" +
    "\001\001\000\002\001\001\000\004\004\324\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<String> errores = new ArrayList();
    public void unrecovered_syntax_error(Symbol s) {
        errores.add("Error de sintaxis en el codigo. Revise el codigo. No recuperable.");
        System.err.println("Error de sintaxis en el codigo. Revise el codigo.");
        System.out.println(s.toString());
    }
    public Nodo padre;
    public int contador;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exit_when ::= EXIT WHEN condicion_if SEMICOLON 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicion_loopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicion_loopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion_loop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo exitwhen = new Nodo ("exit-when");
exitwhen.setNumNodo(parser.contador++);
exitwhen.addHijo((Nodo) condicion_loop);
RESULT = exitwhen;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exit_when",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // loop_func ::= LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp_finalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp_finalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp_final = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(lp.toString() + e.toString());
Nodo nodoLoop = new Nodo ("loop");
nodoLoop.setNumNodo(parser.contador++);
nodoLoop.addHijo((Nodo) c);
RESULT = nodoLoop;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("loop_func",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // while_loop ::= WHILE condicion_if LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cond_whileleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cond_whileright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object cond_while = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(wh.toString() + lp.toString() + e.toString() + lp1.toString() + semi.toString());
Nodo nodoWhile = new Nodo("while");
nodoWhile.setNumNodo(parser.contador++);
nodoWhile.addHijo((Nodo) cond_while);
nodoWhile.addHijo((Nodo) c);
RESULT = nodoWhile;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("while_loop",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_loop ::= FOR ID IN operando1 DOSPUNTOS operando1 LOOP cuerpo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int puntosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int puntosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object puntos = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int op1_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int op1_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object op1_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoFor = new Nodo ("for");
nodoFor.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
nodoFor.addHijo((Nodo) hijoId);
nodoFor.addHijo((Nodo) op1);
nodoFor.addHijo((Nodo) op1_2);
nodoFor.addHijo((Nodo) c);
RESULT = nodoFor;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_loop",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // get_function ::= GET PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoGet = new Nodo("get");
nodoGet.setNumNodo(parser.contador++);
nodoGet.setValor(id.toString());
RESULT = nodoGet;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get_function",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valores_funcion ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valores_funcion ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valores_funcion ::= NUMFLOAT 
            {
              Object RESULT =null;
		int nfloatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nfloatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nfloat = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_float");
tmp.setValor(nfloat.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valores_funcion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valores_funcion ::= NUMINT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_int");
tmp.setValor(num.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_funcion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // repeticion_parametros ::= valores_funcion 
            {
              Object RESULT =null;
		int vfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ();
tmp = (Nodo) vf;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // repeticion_parametros ::= valores_funcion COMA repeticion_parametros 
            {
              Object RESULT =null;
		int vfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int repParamleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int repParamright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object repParam = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo (",");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) vf);
tmp.addHijo((Nodo) repParam);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_parametros",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // llamado_funcion ::= ID PARIZQ repeticion_parametros PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int par_izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int par_izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object par_izq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rep_paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rep_paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object rep_param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int par_derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int par_derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object par_der = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("llamado_funcion");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo ("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
tmp.addHijo((Nodo) rep_param);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamado_funcion",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // put_function ::= PUT PARIZQ llamado_funcion PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoPut = new Nodo("put");
nodoPut.setNumNodo(parser.contador++);
Nodo tmp2 = (Nodo) llamadoF;
nodoPut.setValor(tmp2.getValor());
RESULT = nodoPut;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // put_function ::= PUT PARIZQ valores_numericos_booleanos PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoPut = new Nodo ("put");
nodoPut.setNumNodo(parser.contador++);
Nodo tmp2 = (Nodo) valNumBool;
nodoPut.setValor(tmp2.getValor());
RESULT = nodoPut;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // put_function ::= PUT PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int par_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int par_izquierdoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object par_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int par_derecholeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int par_derechoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object par_derecho = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo nodoPut = new Nodo ("put");
nodoPut.setNumNodo(parser.contador++);
nodoPut.setValor(cadena.toString().substring(1, cadena.toString().length() - 1));
RESULT = nodoPut;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("put_function",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bloque_if ::= IF condicion_if THEN cuerpo END IF SEMICOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cond_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cond_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object cond_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int end_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int end_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int if1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object if1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra if elsif");
Nodo hijoIf = new Nodo ("if-then");
hijoIf.setNumNodo(parser.contador++);
hijoIf.addHijo((Nodo) cond_if);
hijoIf.addHijo((Nodo) c);
RESULT = hijoIf;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque_if",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bloque_if ::= IF condicion_if THEN cuerpo elseif_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cond_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cond_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object cond_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int el_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int el_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object el_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra if elsif");
Nodo hijoIf = new Nodo ("if-then");
hijoIf.setNumNodo(parser.contador++);
hijoIf.addHijo((Nodo) cond_if);
hijoIf.addHijo((Nodo) c);
hijoIf.addHijo((Nodo) el_if);
RESULT = hijoIf;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque_if",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // elseif_else ::= ELSE cuerpo END IF SEMICOLON 
            {
              Object RESULT =null;
		int else1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object else1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int end_ifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int end_ifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end_if = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int if2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int if2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object if2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra if con else");
Nodo hijoElse = new Nodo ("else");
hijoElse.setNumNodo(parser.contador++);
hijoElse.addHijo((Nodo) c);
RESULT = hijoElse;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elseif_else",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elseif_else ::= ELSIF condicion_if THEN cuerpo elseif_else 
            {
              Object RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cond_elifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cond_elifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object cond_elif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int elif_elseleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elif_elseright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elif_else = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra elsif");
Nodo elsif = new Nodo ("elsif-then");
elsif.setNumNodo(parser.contador++);
elsif.addHijo((Nodo) cond_elif);
elsif.addHijo((Nodo) c);
elsif.addHijo((Nodo) elif_else);
RESULT = elsif;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elseif_else",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicion_if ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(f.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion_if ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(t.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion_if ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("id");
tmp.setNumNodo(parser.contador++);
tmp.setValor(id.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion_if ::= operando1 OPREL operando1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra holis");
Nodo hijoOprel = new Nodo (oprel.toString());
hijoOprel.setNumNodo(parser.contador++);
hijoOprel.addHijo((Nodo) op1);
hijoOprel.addHijo((Nodo) op2);
RESULT = hijoOprel;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicion_if ::= PARIZQ condicion_if PARDER 
            {
              Object RESULT =null;
		int par_izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int par_izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object par_izq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int par_derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int par_derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object par_der = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo if_parentesis = (Nodo) condIf;
if_parentesis.setNumNodo(parser.contador++);
RESULT = if_parentesis;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicion_if ::= operando1 OPREL operando1 op_logicos condicion_if 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object oprel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicional = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int condIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(oprel.toString() + condicional.toString());
Nodo opLogico = (Nodo) condicional;
opLogico.setNumNodo(parser.contador++);
Nodo hijoOprel = new Nodo (oprel.toString());
hijoOprel.setNumNodo(parser.contador++);
hijoOprel.addHijo((Nodo) op1);
hijoOprel.addHijo((Nodo) op2);
opLogico.addHijo((Nodo) hijoOprel);
opLogico.addHijo((Nodo) condIf);
RESULT = opLogico;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_if",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op_logicos ::= OR 
            {
              Object RESULT =null;
		
Nodo tmp = new Nodo("or");
tmp.setNumNodo(parser.contador++);
RESULT=tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_logicos",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op_logicos ::= AND 
            {
              Object RESULT =null;
		
Nodo tmp = new Nodo("and");
tmp.setNumNodo(parser.contador++);
RESULT=tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_logicos",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operando1 ::= NUMFLOAT 
            {
              Object RESULT =null;
		int nfloatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nfloatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nfloat = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_float");
tmp.setValor(nfloat.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operando1 ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(f.toString());
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(f.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operando1 ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(t.toString());
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(t.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operando1 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString());
Nodo tmp = new Nodo ("id");
tmp.setNumNodo(parser.contador++);
tmp.setValor(id.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operando1 ::= NUMINT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(num.toString());
Nodo tmp = new Nodo ("num");
tmp.setNumNodo(parser.contador++);
tmp.setValor(num.toString());
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operando1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fin_cuerpo ::= RETURN valores_numericos_booleanos SEMICOLON 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semiRTleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiRTright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semiRT = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
Nodo hijoReturn = new Nodo("return");
hijoReturn.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoReturn);
tmp.addHijo((Nodo) valNumBool);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fin_cuerpo ::= exit_when 
            {
              Object RESULT =null;
		int exitWhenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exitWhenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exitWhen = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) exitWhen;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo; 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fin_cuerpo ::= llamado_funcion SEMICOLON 
            {
              Object RESULT =null;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) llamadoF;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fin_cuerpo ::= BEG 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) b;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fin_cuerpo ::= asignar_valor 
            {
              Object RESULT =null;
		int asignarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int asignarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object asignar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) asignar;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fin_cuerpo ::= bloque_if 
            {
              Object RESULT =null;
		int bloqueIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bloqueIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bloqueIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) bloqueIf;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fin_cuerpo ::= get_function 
            {
              Object RESULT =null;
		int getFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int getFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object getFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) getFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fin_cuerpo ::= put_function 
            {
              Object RESULT =null;
		int putFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int putFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object putFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) putFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fin_cuerpo ::= loop_func 
            {
              Object RESULT =null;
		int loopFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int loopFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object loopFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) loopFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fin_cuerpo ::= while_loop 
            {
              Object RESULT =null;
		int whileLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int whileLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object whileLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) whileLoop;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fin_cuerpo ::= for_loop 
            {
              Object RESULT =null;
		int forLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int forLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object forLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo cuerpo = (Nodo) forLoop;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fin_cuerpo",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo ::= fin_cuerpo 
            {
              Object RESULT =null;
		int fcuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fcuerporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fcuerpo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = fcuerpo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo ::= exit_when cuerpo 
            {
              Object RESULT =null;
		int exitWhenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exitWhenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exitWhen = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) exitWhen);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo ::= llamado_funcion SEMICOLON cuerpo 
            {
              Object RESULT =null;
		int llamadoFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int llamadoFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object llamadoF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) llamadoF);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo ::= asignar_valor cuerpo 
            {
              Object RESULT =null;
		int asignarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) asignar);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo ::= BEG cuerpo 
            {
              Object RESULT =null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object begin = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) begin);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo ::= get_function cuerpo 
            {
              Object RESULT =null;
		int getFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int getFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object getFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) getFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo ::= put_function cuerpo 
            {
              Object RESULT =null;
		int putFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int putFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object putFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) putFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpo ::= bloque_if cuerpo 
            {
              Object RESULT =null;
		int bloqueIfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bloqueIfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bloqueIf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) bloqueIf);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpo ::= RETURN valores_numericos_booleanos SEMICOLON cuerpo 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valNumBoolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valNumBoolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valNumBool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semiRTleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiRTright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semiRT = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
Nodo hijoReturn = new Nodo("return");
hijoReturn.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoReturn);
tmp.addHijo((Nodo) valNumBool);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo ::= loop_func cuerpo 
            {
              Object RESULT =null;
		int loopFuncleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int loopFuncright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object loopFunc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) loopFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo ::= while_loop cuerpo 
            {
              Object RESULT =null;
		int whileLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int whileLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object whileLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) whileLoop);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpo ::= for_loop cuerpo 
            {
              Object RESULT =null;
		int forLoopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int forLoopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object forLoop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("entra for cuerpo");
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) forLoop);
tmp.addHijo((Nodo) c);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BEG ::= BEGIN cuerpo END end_id SEMICOLON 
            {
              Object RESULT =null;
		int bgnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bgnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bgn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int endIdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int endIdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object endId = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("Beg");
tmp.setNumNodo(parser.contador++);
Nodo hijo = new Nodo("begin");
hijo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijo);
tmp.addHijo((Nodo) c);
Nodo hijoEnd = new Nodo("end");
hijoEnd.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoEnd);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEG",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignar_valor ::= ID ASIGNACION S SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
tmp.addHijo((Nodo) s1);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignar_valor ::= ID ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString() + asignacion.toString() + f.toString());
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
Nodo hijoFalse = new Nodo("boolean");
hijoFalse.setNumNodo(parser.contador++);
hijoFalse.setValor(f.toString());
tmp.addHijo((Nodo) hijoFalse);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignar_valor ::= ID ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString() + asignacion.toString() + t.toString());
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
Nodo hijoTrue = new Nodo("boolean");
hijoTrue.setNumNodo(parser.contador++);
hijoTrue.setValor(t.toString());
tmp.addHijo((Nodo) hijoTrue);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Variables ::= PROCEDURE ID IS BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Variables ::= PROCEDURE ID IS Variables BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) v1);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Variables ::= funcion parametros_funcion BEG 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int pmFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pmFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object pmF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo funcion = (Nodo) func;
funcion.setNumNodo(parser.contador++);
funcion.addHijo((Nodo) pmF);
funcion.addHijo((Nodo) b);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setNumNodo(parser.contador++);
tipo.setValor(tp.toString());
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo)inicializar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setNumNodo(parser.contador++);
tipo.setValor(tp.toString());
tmp.addHijo((Nodo) tipo);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Variables ::= PROCEDURE ID IS Variables BEG Variables 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) v1);
procedure.addHijo((Nodo) b);
tmp.addHijo((Nodo) v2);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Variables ::= funcion parametros_funcion BEG Variables 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int pmFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int pmFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object pmF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo funcion = (Nodo) func;
funcion.addHijo((Nodo) pmF);
funcion.addHijo((Nodo) b);
tmp.addHijo((Nodo) funcion);
tmp.addHijo((Nodo) v);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo)inicializar);
tmp.addHijo((Nodo) v);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Variables ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON Variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo) v);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variables",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
tmp.addHijo((Nodo) paramF);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_funcion ::= repeticion_id DECLARACION TIPOVARIABLE SEMICOLON parametros_funcion 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object paramF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("declaracion_variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) paramF);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_funcion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE asignar_valor_variables parametros_obligatorios 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int inicializarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inicializarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object inicializar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pm_oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pm_oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pm_o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
tmp.addHijo((Nodo) pm_o);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros_obligatorios ::= repeticion_id DECLARACION TIPOVARIABLE parametros_obligatorios 
            {
              Object RESULT =null;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pm_oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pm_oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pm_o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) pm_o);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros_obligatorios",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcion ::= FUNCTION ID PARIZQ parametros_obligatorios PARDER RETURN TIPOVARIABLE IS 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parizqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parizqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object parizq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int parderleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parderright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parder = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo ("declaracion_funcion");
tmp.setNumNodo(parser.contador++);
Nodo hijoFuncion = new Nodo("function");
hijoFuncion.setNumNodo(parser.contador++);
hijoFuncion.setValor(id.toString());
tmp.addHijo((Nodo) hijoFuncion);
tmp.addHijo((Nodo) pm);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignar_valor_variables ::= ASIGNACION FALSE 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
System.out.println(asignacion.toString() + f.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignar_valor_variables ::= ASIGNACION TRUE 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
System.out.println(asignacion.toString() + t.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignar_valor_variables ::= ASIGNACION S 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = s;
System.out.println(asignacion.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignar_valor_variables",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // repeticion_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo hijo = new Nodo("id");
hijo.setNumNodo(parser.contador++);
hijo.setValor(id.toString());
RESULT = hijo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_id",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // repeticion_id ::= ID COMA repeticion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rep_idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rep_idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object rep_id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println(id.toString() + coma.toString() + "2. declaracion_id");
Nodo tmp = new Nodo(",");
tmp.setNumNodo(parser.contador++);
Nodo hijo = new Nodo("id");
hijo.setValor(id.toString());
hijo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)hijo);
tmp.addHijo((Nodo)rep_id);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion_id",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valores_numericos_booleanos ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valores_numericos_booleanos ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valores_numericos_booleanos ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valores_numericos_booleanos ::= NUMFLOAT 
            {
              Object RESULT =null;
		int num_floatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num_floatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num_float = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_float");
tmp.setValor(num_float.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valores_numericos_booleanos ::= NUMINT 
            {
              Object RESULT =null;
		int num_Intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num_Intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num_Int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_int");
tmp.setValor(num_Int.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores_numericos_booleanos",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // F ::= PARIZQ E PARDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
RESULT = e;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // F ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // F ::= NUMFLOAT 
            {
              Object RESULT =null;
		int num_floatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num_floatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num_float = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("numfloat");
tmp.setValor(num_float.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // F ::= NUMINT 
            {
              Object RESULT =null;
		int num_Intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num_Intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num_Int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("num_int");
tmp.setValor(num_Int.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = f;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // T ::= T OPMULTIPLICACION F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo(op.toString(),opleft+1,opright+1);
Nodo n1 = ((Nodo)a);
Nodo n2 =((Nodo)b);
n1.setNumNodo(parser.contador++);
n2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)n1);
tmp.addHijo((Nodo)n2);
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= T 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = b;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= E OPSUMA T 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo(op.toString(),opleft+1,opright+1);
Nodo n1 = ((Nodo)a);
Nodo n2 =((Nodo)b);
n1.setNumNodo(parser.contador++);
n2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)n1);
tmp.addHijo((Nodo)n2);
tmp.setNumNodo(parser.contador++);
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = e;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // end_id ::= 
            {
              Object RESULT =null;
		
RESULT = "";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("end_id",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT = id;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("end_id",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= PROCEDURE ID IS BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("Inicio");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
procedure.addHijo((Nodo) hijoId);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error ID IS Variables BEG 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
System.out.println("Falta palabra procedure");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= PROCEDURE ID IS Variables BEG 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
Nodo tmp = new Nodo("Inicio");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
Nodo prueba = (Nodo) var;
procedure.addHijo((Nodo) prueba);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

