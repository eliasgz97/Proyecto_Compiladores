package proyectocompiladores;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;





parser code 
{:  
    public ArrayList<String> errores = new ArrayList();
    public void unrecovered_syntax_error(Symbol s) {
        errores.add("Error de sintaxis en el codigo. Revise el codigo. No recuperable.");
        System.err.println("Error de sintaxis en el codigo. Revise el codigo.");
        System.out.println(s.toString());
    }
    public Nodo padre;
    public int contador;
:};

/*Terminales*/
terminal PROCEDURE,ID,SEMICOLON, IS, DECLARACION, TIPOVARIABLE, BEGIN, STRING, END, IF, NUMERO, OPREL, TRUE, FALSE, THEN, ELSIF;
terminal CONDICIONALES, ELSE, PUT, PARIZQ, PARDER, GET, FOR, IN, DOSPUNTOS, LOOP, WHILE, EXIT, WHEN, ASIGNACION, COMA;
terminal OPSUMA, OPMULTIPLICACION, RETURN, FUNCTION;

/*No Terminales*/
non terminal Inicio, Variables, BEG, operando1, operando2, bloque_if, condicion_if, elseif_else, put_function, get_function;
non terminal for_loop, while_loop, loop_func, exit_when, asignar_valor, repeticion_id, end_id, cuerpo, fin_cuerpo;
non terminal asignar_valor_variables, funcion, num_o_id, S, T, F, E, Q, cuerpo_funcion, fin_cuerpo_funcion, parametros_funcion;

// Precedencia de Operadores - de menor a mayor
precedence left OPSUMA;
precedence left OPMULTIPLICACION;

start with Inicio;

Inicio ::= PROCEDURE:proc ID:id IS:i Variables:var BEG:b 
{:
System.out.println(id.toString()+"1: Procedure");
Nodo tmp = new Nodo("Inicio");
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
procedure.addHijo((Nodo) var);
procedure.addHijo((Nodo) b);
System.out.println(procedure.getHijos().get(0).getNombre() + "entra");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
parser.padre = (Nodo) tmp;
RESULT = tmp;
:}
|
error:r ID:id IS:i Variables:var BEG:b
{:
System.out.println("Falta palabra procedure");
:}
;

num_o_id ::= ID:id
|
NUMERO:num
;

end_id ::= ID:id
{:
RESULT = id;
:}
|
{:
RESULT = "";
:}
;

S ::= E:e
{:
RESULT = e;
:}
;

E ::= E:a OPSUMA:op T:b
{:
Nodo tmp = new Nodo(op.toString(),opleft+1,opright+1);
Nodo n1 = ((Nodo)a);
Nodo n2 =((Nodo)b);
n1.setNumNodo(parser.contador++);
n2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)n1);
tmp.addHijo((Nodo)n2);
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
T:b
{:
RESULT = b;
:}
;

T ::= T:a OPMULTIPLICACION:op F:b
{:
Nodo tmp = new Nodo(op.toString(),opleft+1,opright+1);
Nodo n1 = ((Nodo)a);
Nodo n2 =((Nodo)b);
n1.setNumNodo(parser.contador++);
n2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)n1);
tmp.addHijo((Nodo)n2);
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
F:f
{:
RESULT = f;
:}
;

F ::= NUMERO:num
{:
Nodo tmp = new Nodo("num");
tmp.setValor(num.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
ID:id
{:
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
PARIZQ E:e PARDER
{:
RESULT = e;
:}
;

repeticion_id ::= ID:id COMA:coma repeticion_id:rep_id
{:
System.out.println(id.toString() + coma.toString() + "2. declaracion_id");
Nodo tmp = new Nodo(",");
tmp.setNumNodo(parser.contador++);
Nodo hijo = new Nodo("id");
hijo.setValor(id.toString());
hijo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)hijo);
tmp.addHijo((Nodo)rep_id);
RESULT = tmp;
:}
|
ID:id
{:
Nodo hijo = new Nodo("id");
hijo.setNumNodo(parser.contador++);
hijo.setValor(id.toString());
RESULT = hijo;
:}
;

asignar_valor_variables ::= ASIGNACION:asignacion S:s
{:
RESULT = s;
System.out.println(asignacion.toString());
:}
|
ASIGNACION:asignacion TRUE:t
{:
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
System.out.println(asignacion.toString() + t.toString());
:}
|
ASIGNACION:asignacion FALSE:f
{:
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
System.out.println(asignacion.toString() + f.toString());
:}
;

funcion ::= FUNCTION:f ID:id PARIZQ:parizq parametros_funcion:param_funct PARDER:parder RETURN:rt TIPOVARIABLE:tipo_var
IS:i parametros_funcion:pmfuncion BEG:b RETURN:rt1 S:s1
;

parametros_funcion ::= repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo SEMICOLON:semi parametros_funcion
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo asignar_valor_variables:inicializar SEMICOLON:semi parametros_funcion
|
{:
:}
;

Variables ::= repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tp SEMICOLON:semi Variables:v
{:
Nodo tmp = new Nodo("Variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo) v);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tp asignar_valor_variables:inicializar SEMICOLON:semi Variables:v
{:
Nodo tmp = new Nodo("Variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo)inicializar);
tmp.addHijo((Nodo) v);
RESULT = tmp;
System.out.println("inicializa");
:}
/*
|
BEG:b 
{:
Nodo tmp = new Nodo("BEGIN");
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
Inicio:in BEG:b
{:
//System.out.println(in.toString());
:}
*/
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tp SEMICOLON:semi
{:
Nodo tmp = new Nodo("Variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tp asignar_valor_variables:inicializar SEMICOLON:semi
{:
Nodo tmp = new Nodo("Variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo)inicializar);
RESULT = tmp;
System.out.println("inicializa");
:}
;

asignar_valor ::= ID:id ASIGNACION:asignacion TRUE:t SEMICOLON:semi
{:
System.out.println(id.toString() + asignacion.toString() + t.toString());
:}
|
ID:id ASIGNACION:asignacion FALSE:f SEMICOLON:semi
{:
System.out.println(id.toString() + asignacion.toString() + f.toString());
:}
|
ID:id ASIGNACION:asignacion S:s1 SEMICOLON:semi
;

BEG ::= BEGIN:bgn cuerpo:c END:end end_id:endId SEMICOLON:semi
{:
Nodo tmp = new Nodo("Beg");
tmp.setNumNodo(parser.contador++);
Nodo hijo = new Nodo("begin");
hijo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijo);
Nodo hijo2 = new Nodo("cuerpo");
hijo2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijo2);
Nodo hijo3 = new Nodo("end" + endId.toString());
hijo3.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijo3);
System.out.println(tmp.getHijos().get(1).getNombre());
RESULT = tmp;
:}
;

cuerpo ::= for_loop:forLoop cuerpo:c
{:
System.out.println("Entra al cuerpo");
:}
|
while_loop:whileLoop cuerpo:c
{:
System.out.println("Entra al cuerpo");
:}
|
loop_func:loopFunc cuerpo:c
{:
System.out.println("Entra al cuerpo");
:}
|
bloque_if:bloqueIf cuerpo:c
{:
System.out.println("Entra al cuerpo");
:}
|
put_function:putFunc cuerpo:c
{:
System.out.println("Entra al cuerpo");
:}
|
get_function:getFunc cuerpo:c
{:
System.out.println("Entra al cuerpo");
:}
|
BEG:begin cuerpo:c
{:
System.out.println("Entra al cuerpo");
:}
|
asignar_valor:asignar cuerpo:c
{:
System.out.println("Entra al cuerpo");
:}
|
fin_cuerpo:fcuerpo
{:
System.out.println("Entra al cuerpo");
:}
|
RETURN S:s cuerpo:c
;



fin_cuerpo ::= for_loop:forLoop
{:
System.out.println("Entra a fin cuerpo");
:}
|
while_loop:whileLoop
{:
System.out.println("Entra al cuerpo");
:}
|
loop_func:loopFunc
{:
System.out.println("Entra al cuerpo");
:}
|
put_function:putFunc
{:
System.out.println("Entra al cuerpo");
:}
|
get_function:getFunc
{:
System.out.println("Entra al cuerpo");
:}
|
bloque_if:bloqueIf
{:
System.out.println("Entra al cuerpo");
:}
|
asignar_valor:asignar
{:
System.out.println("Entra al cuerpo");
:}
|
BEG:b
{:
System.out.println("Entra al Ãºltimo begin");
:}
|
RETURN S:s
;

operando1 ::= NUMERO:num
{:
System.out.println(num.toString());
:}
|
ID:id
{:
System.out.println(id.toString());
:}
|
RETURN S:s
;

operando2 ::= TRUE:t
{:
System.out.println(t.toString());
:}
|
FALSE:f
{:
System.out.println(f.toString());
:}
|
NUMERO:num
{:
System.out.println(num.toString());
:}
|
ID:id
{:
System.out.println(id.toString());
:}
;

condicion_if ::= operando1:op1 OPREL:oprel operando2:op2 CONDICIONALES:condicional condicion_if:condIf
{:
System.out.println(oprel.toString() + condicional.toString());
:}
|
operando1:op1 OPREL:oprel operando2:op2
{:
System.out.println(oprel.toString());
:}
|
ID:id
{:
:} 
|
TRUE:t
{:
:}
|
FALSE:f
{:
:}
;

elseif_else ::= ELSIF:elif condicion_if:cond_elif THEN:then cuerpo:c elseif_else:elif_else
{:
System.out.println(elif.toString() + then.toString());
:}
|
ELSE:else1 cuerpo:c END:end_if IF:if2 SEMICOLON:semi
{:
System.out.println(else1.toString() + end_if.toString() + if2.toString());
:}
;



bloque_if ::= IF:i condicion_if THEN:then cuerpo:c elseif_else:el_if
{:
System.out.println(i.toString() + then.toString());
:}
|
IF:i condicion_if THEN:then cuerpo:c END:end_if IF:if1 SEMICOLON:semi
{:
System.out.println(i.toString() + then.toString() + end_if.toString() + if1.toString());
:}
;

put_function ::= PUT:p PARIZQ:par_izquierdo STRING:cadena PARDER:par_derecho SEMICOLON:semi
{:
System.out.println(p.toString() + par_izquierdo.toString() + cadena.toString() +  par_derecho.toString());
:}
|
PUT:p PARIZQ:par_izquierdo ID:id PARDER:par_derecho SEMICOLON:semi
{:
System.out.println(p.toString() + par_izquierdo.toString() + id.toString() + par_derecho.toString());
:}
|
PUT:p PARIZQ:par_izquierdo NUMERO:num PARDER:par_derecho SEMICOLON:semi
{:
System.out.println(p.toString() + par_izquierdo.toString() + num.toString() + par_derecho.toString());
:}
;

get_function ::= GET:g PARIZQ:par_izquierdo ID:id PARDER:par_derecho SEMICOLON:semi
{:
System.out.println(g.toString() + par_izquierdo.toString() + id.toString() +  par_derecho.toString());
:}
;

for_loop ::= FOR:f ID:id IN:i operando1 DOSPUNTOS:puntos operando1 LOOP:lp1 cuerpo:c END:e LOOP:lp2 SEMICOLON:semi
{:
System.out.println(f.toString() + id.toString() + puntos.toString() + lp1.toString() + e.toString() + lp2.toString());
:}
;

while_loop ::= WHILE:wh condicion_if:cond_while LOOP:lp cuerpo:c END:e LOOP:lp1 SEMICOLON:semi
{:
System.out.println(wh.toString() + lp.toString() + e.toString() + lp1.toString() + semi.toString());
:}
;

loop_func ::= LOOP:lp cuerpo:c END:e exit_when
{:
System.out.println(lp.toString() + e.toString());
:}
|
LOOP:lp cuerpo:c END:e
{:
System.out.println(lp.toString() + e.toString());
:}
;

exit_when ::= EXIT:ex WHEN:wh condicion_if:condicion_loop SEMICOLON:semi
{:
:}
;


 





