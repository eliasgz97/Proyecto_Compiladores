package proyectocompiladores;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;





parser code 
{:  
    public ArrayList<String> errores = new ArrayList();
    public void unrecovered_syntax_error(Symbol s) {
        errores.add("Error de sintaxis en el codigo. Revise el codigo. No recuperable.");
        System.err.println("Error de sintaxis en el codigo. Revise el codigo.");
        System.out.println(s.toString());
    }
    public Nodo padre;
    public int contador;
:};

/*Terminales*/
terminal PROCEDURE,ID,SEMICOLON, IS, DECLARACION, TIPOVARIABLE, BEGIN, STRING, END, IF, OPREL, TRUE, FALSE, THEN, ELSIF;
terminal AND, OR, ELSE, PUT, PARIZQ, PARDER, GET, FOR, IN, DOSPUNTOS, LOOP, WHILE, EXIT, WHEN, ASIGNACION, COMA;
terminal OPSUMA, OPMULTIPLICACION, RETURN, FUNCTION, NUMINT, NUMFLOAT;

/*No Terminales*/
non terminal Inicio, Variables, BEG, operando1, bloque_if, condicion_if, elseif_else, put_function, get_function;
non terminal for_loop, while_loop, loop_func, exit_when, asignar_valor, repeticion_id, end_id, cuerpo, fin_cuerpo;
non terminal asignar_valor_variables, funcion, S, T, F, E, parametros_funcion, valores_funcion;
non terminal parametros_obligatorios, valores_numericos_booleanos, repeticion_parametros, llamado_funcion, op_logicos;

// Precedencia de Operadores - de menor a mayor
precedence left OPSUMA;
precedence left OPMULTIPLICACION;
precedence left AND;
precedence left OR;

start with Inicio;

Inicio ::= PROCEDURE:proc ID:id IS:i Variables:var BEG:b
{:
Nodo tmp = new Nodo("Inicio");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
Nodo prueba = (Nodo) var;
procedure.addHijo((Nodo) prueba);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;
:}
|
error:r ID:id IS:i Variables:var BEG:b
{:
System.out.println("Falta palabra procedure");
:}
|
PROCEDURE:proc ID:id IS:i BEG:b 
{:
Nodo tmp = new Nodo("Inicio");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
procedure.addHijo((Nodo) hijoId);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;
:}
;

end_id ::= ID:id
{:
RESULT = id;
:}
|
{:
RESULT = "";
:}
;

S ::= E:e
{:
RESULT = e;
:}
;

E ::= E:a OPSUMA:op T:b
{:
Nodo tmp = new Nodo(op.toString(),opleft+1,opright+1);
Nodo n1 = ((Nodo)a);
Nodo n2 =((Nodo)b);
n1.setNumNodo(parser.contador++);
n2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)n1);
tmp.addHijo((Nodo)n2);
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
T:b
{:
RESULT = b;
:}
;

T ::= T:a OPMULTIPLICACION:op F:b
{:
Nodo tmp = new Nodo(op.toString(),opleft+1,opright+1);
Nodo n1 = ((Nodo)a);
Nodo n2 =((Nodo)b);
n1.setNumNodo(parser.contador++);
n2.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)n1);
tmp.addHijo((Nodo)n2);
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
F:f
{:
RESULT = f;
:}
;

F ::= NUMINT:num_Int
{:
Nodo tmp = new Nodo("num_int");
tmp.setValor(num_Int.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
NUMFLOAT:num_float
{:
Nodo tmp = new Nodo("numfloat");
tmp.setValor(num_float.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
ID:id
{:
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
PARIZQ E:e PARDER
{:
RESULT = e;
:}
;

valores_numericos_booleanos ::= NUMINT:num_Int
{:
Nodo tmp = new Nodo("num_int");
tmp.setValor(num_Int.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
NUMFLOAT:num_float
{:
Nodo tmp = new Nodo("num_float");
tmp.setValor(num_float.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
ID:id
{:
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
FALSE:f
{:
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
TRUE:t
{:
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
;

repeticion_id ::= ID:id COMA:coma repeticion_id:rep_id
{:
System.out.println(id.toString() + coma.toString() + "2. declaracion_id");
Nodo tmp = new Nodo(",");
tmp.setNumNodo(parser.contador++);
Nodo hijo = new Nodo("id");
hijo.setValor(id.toString());
hijo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo)hijo);
tmp.addHijo((Nodo)rep_id);
RESULT = tmp;
:}
|
ID:id
{:
Nodo hijo = new Nodo("id");
hijo.setNumNodo(parser.contador++);
hijo.setValor(id.toString());
RESULT = hijo;
:}
;

asignar_valor_variables ::= ASIGNACION:asignacion S:s
{:
RESULT = s;
System.out.println(asignacion.toString());
:}
|
ASIGNACION:asignacion TRUE:t
{:
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
System.out.println(asignacion.toString() + t.toString());
:}
|
ASIGNACION:asignacion FALSE:f
{:
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
System.out.println(asignacion.toString() + f.toString());
:}
;

funcion ::= FUNCTION:f ID:id PARIZQ:parizq parametros_obligatorios:pm PARDER:parder RETURN:rt TIPOVARIABLE:tipo_var
IS:i
{:
Nodo tmp = new Nodo ("declaracion_funcion");
tmp.setNumNodo(parser.contador++);
Nodo hijoFuncion = new Nodo("function");
hijoFuncion.setNumNodo(parser.contador++);
hijoFuncion.setValor(id.toString());
tmp.addHijo((Nodo) hijoFuncion);
tmp.addHijo((Nodo) pm);
RESULT = tmp;
:}
;

parametros_obligatorios ::= repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo parametros_obligatorios:pm_o
{:
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) pm_o);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo asignar_valor_variables:inicializar parametros_obligatorios:pm_o
{:
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
tmp.addHijo((Nodo) pm_o);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo
{:
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo asignar_valor_variables:inicializar
{:
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
RESULT = tmp;
:}
;

parametros_funcion ::= repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo SEMICOLON:semi parametros_funcion:paramF
{:
Nodo tmp = new Nodo("declaracion_variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) paramF);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo asignar_valor_variables:inicializar SEMICOLON:semi parametros_funcion:paramF
{:
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
tmp.addHijo((Nodo) paramF);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo asignar_valor_variables:inicializar SEMICOLON:semi
{:
Nodo tmp = new Nodo("parametros_funcion");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
tmp.addHijo((Nodo) inicializar);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tipo SEMICOLON:semi
{:
Nodo tmp = new Nodo("declaracion_variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo hijoTipovar = new Nodo("tipo_variable");
hijoTipovar.setNumNodo(parser.contador++);
hijoTipovar.setValor(tipo.toString());
tmp.addHijo((Nodo) hijoTipovar);
RESULT = tmp;
:}
;

Variables ::= repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tp SEMICOLON:semi Variables:v
{:
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo) v);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tp asignar_valor_variables:inicializar SEMICOLON:semi Variables:v
{:
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setValor(tp.toString());
tipo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo)inicializar);
tmp.addHijo((Nodo) v);
RESULT = tmp;
:}
|
funcion:func parametros_funcion:pmF BEG:b Variables:v
{:
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo funcion = (Nodo) func;
funcion.addHijo((Nodo) pmF);
funcion.addHijo((Nodo) b);
tmp.addHijo((Nodo) funcion);
tmp.addHijo((Nodo) v);
RESULT = tmp;
:}
|
PROCEDURE:proc ID:id IS:is Variables:v1 BEG:b Variables:v2
{:
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) v1);
procedure.addHijo((Nodo) b);
tmp.addHijo((Nodo) v2);
parser.padre = (Nodo) tmp;
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tp SEMICOLON:semi
{:
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setNumNodo(parser.contador++);
tipo.setValor(tp.toString());
tmp.addHijo((Nodo) tipo);
RESULT = tmp;
:}
|
repeticion_id:rep_id DECLARACION:dec TIPOVARIABLE:tp asignar_valor_variables:inicializar SEMICOLON:semi
{:
Nodo tmp = new Nodo("variables");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) rep_id);
Nodo tipo = new Nodo("tipo");
tipo.setNumNodo(parser.contador++);
tipo.setValor(tp.toString());
tmp.addHijo((Nodo) tipo);
tmp.addHijo((Nodo)inicializar);
RESULT = tmp;
:}
|
funcion:func parametros_funcion:pmF BEG:b
{:
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo funcion = (Nodo) func;
funcion.setNumNodo(parser.contador++);
funcion.addHijo((Nodo) pmF);
funcion.addHijo((Nodo) b);
RESULT = tmp;
:}
|
PROCEDURE:proc ID:id IS:is Variables:v1 BEG:b
{:
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) v1);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;
:}
|
PROCEDURE:proc ID:id IS:is BEG:b
{:
Nodo tmp = new Nodo("declaracion_global");
tmp.setNumNodo(parser.contador++);
Nodo procedure = new Nodo("Procedure " + id.toString());
procedure.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) procedure);
procedure.addHijo((Nodo) b);
parser.padre = (Nodo) tmp;
RESULT = tmp;
:}
;

asignar_valor ::= ID:id ASIGNACION:asignacion TRUE:t SEMICOLON:semi
{:
System.out.println(id.toString() + asignacion.toString() + t.toString());
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
Nodo hijoTrue = new Nodo("boolean");
hijoTrue.setNumNodo(parser.contador++);
hijoTrue.setValor(t.toString());
tmp.addHijo((Nodo) hijoTrue);
RESULT = tmp;
:}
|
ID:id ASIGNACION:asignacion FALSE:f SEMICOLON:semi
{:
System.out.println(id.toString() + asignacion.toString() + f.toString());
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
Nodo hijoFalse = new Nodo("boolean");
hijoFalse.setNumNodo(parser.contador++);
hijoFalse.setValor(f.toString());
tmp.addHijo((Nodo) hijoFalse);
RESULT = tmp;
:}
|
ID:id ASIGNACION:asignacion S:s1 SEMICOLON:semi
{:
Nodo tmp = new Nodo ("asignar_valor");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
tmp.addHijo((Nodo) s1);
RESULT = tmp;
:}
;

BEG ::= BEGIN:bgn cuerpo:c END:end end_id:endId SEMICOLON:semi
{:
Nodo tmp = new Nodo("Beg");
tmp.setNumNodo(parser.contador++);
Nodo hijo = new Nodo("begin");
hijo.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijo);
tmp.addHijo((Nodo) c);
Nodo hijoEnd = new Nodo("end");
hijoEnd.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoEnd);
RESULT = tmp;
:}
;

cuerpo ::= for_loop:forLoop cuerpo:c
{:
System.out.println("entra for cuerpo");
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) forLoop);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
while_loop:whileLoop cuerpo:c
{:
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) whileLoop);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
loop_func:loopFunc cuerpo:c
{:
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) loopFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
RETURN:rt valores_numericos_booleanos:valNumBool SEMICOLON:semiRT cuerpo:c
{:
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
Nodo hijoReturn = new Nodo("return");
hijoReturn.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoReturn);
tmp.addHijo((Nodo) valNumBool);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
bloque_if:bloqueIf cuerpo:c
{:
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) bloqueIf);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
put_function:putFunc cuerpo:c
{:
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) putFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
get_function:getFunc cuerpo:c
{:
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) getFunc);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
BEG:begin cuerpo:c
{:
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) begin);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
asignar_valor:asignar cuerpo:c
{:
Nodo tmp = new Nodo("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) asignar);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
llamado_funcion:llamadoF SEMICOLON:semi cuerpo:c
{:
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) llamadoF);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
exit_when:exitWhen cuerpo:c
{:
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) exitWhen);
tmp.addHijo((Nodo) c);
RESULT = tmp;
:}
|
fin_cuerpo:fcuerpo
{:
RESULT = fcuerpo;
:}
;



fin_cuerpo ::= for_loop:forLoop
{:
Nodo cuerpo = (Nodo) forLoop;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
while_loop:whileLoop
{:
Nodo cuerpo = (Nodo) whileLoop;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
loop_func:loopFunc
{:
Nodo cuerpo = (Nodo) loopFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
put_function:putFunc
{:
Nodo cuerpo = (Nodo) putFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
get_function:getFunc
{:
Nodo cuerpo = (Nodo) getFunc;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
bloque_if:bloqueIf
{:
Nodo cuerpo = (Nodo) bloqueIf;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
asignar_valor:asignar
{:
Nodo cuerpo = (Nodo) asignar;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
BEG:b
{:
Nodo cuerpo = (Nodo) b;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
llamado_funcion:llamadoF SEMICOLON:semi
{:
Nodo cuerpo = (Nodo) llamadoF;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo;
:}
|
exit_when:exitWhen
{:
Nodo cuerpo = (Nodo) exitWhen;
cuerpo.setNumNodo(parser.contador++);
RESULT = cuerpo; 
:}
|
RETURN:rt valores_numericos_booleanos:valNumBool SEMICOLON:semiRT
{:
Nodo tmp = new Nodo ("nueva_linea");
tmp.setNumNodo(parser.contador++);
Nodo hijoReturn = new Nodo("return");
hijoReturn.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) hijoReturn);
tmp.addHijo((Nodo) valNumBool);
RESULT = tmp;
:}
;

operando1 ::= NUMINT:num
{:
System.out.println(num.toString());
Nodo tmp = new Nodo ("num");
tmp.setNumNodo(parser.contador++);
tmp.setValor(num.toString());
RESULT = tmp;
:}
|
ID:id
{:
System.out.println(id.toString());
Nodo tmp = new Nodo ("id");
tmp.setNumNodo(parser.contador++);
tmp.setValor(id.toString());
RESULT = tmp;
:}
|
TRUE:t
{:
System.out.println(t.toString());
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(t.toString());
RESULT = tmp;
:}
|
FALSE:f
{:
System.out.println(f.toString());
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(f.toString());
RESULT = tmp;
:}
|
NUMFLOAT:nfloat
{:
Nodo tmp = new Nodo("num_float");
tmp.setValor(nfloat.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
;

op_logicos ::= AND
{:
Nodo tmp = new Nodo("and");
tmp.setNumNodo(parser.contador++);
RESULT=tmp;
:}
|
OR
{:
Nodo tmp = new Nodo("or");
tmp.setNumNodo(parser.contador++);
RESULT=tmp;
:}
;

condicion_if ::= operando1:op1 OPREL:oprel operando1:op2 op_logicos:condicional condicion_if:condIf
{:
System.out.println(oprel.toString() + condicional.toString());
Nodo opLogico = (Nodo) condicional;
opLogico.setNumNodo(parser.contador++);
Nodo hijoOprel = new Nodo (oprel.toString());
hijoOprel.setNumNodo(parser.contador++);
hijoOprel.addHijo((Nodo) op1);
hijoOprel.addHijo((Nodo) op2);
opLogico.addHijo((Nodo) hijoOprel);
opLogico.addHijo((Nodo) condIf);
RESULT = opLogico;
:}
|
PARIZQ:par_izq condicion_if:condIf PARDER:par_der
{:
Nodo if_parentesis = (Nodo) condIf;
if_parentesis.setNumNodo(parser.contador++);
RESULT = if_parentesis;
:}
|
operando1:op1 OPREL:oprel operando1:op2
{:
System.out.println("entra holis");
Nodo hijoOprel = new Nodo (oprel.toString());
hijoOprel.setNumNodo(parser.contador++);
hijoOprel.addHijo((Nodo) op1);
hijoOprel.addHijo((Nodo) op2);
RESULT = hijoOprel;
:}
|
ID:id
{:
Nodo tmp = new Nodo ("id");
tmp.setNumNodo(parser.contador++);
tmp.setValor(id.toString());
RESULT = tmp;
:} 
|
TRUE:t
{:
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(t.toString());
RESULT = tmp;
:}
|
FALSE:f
{:
Nodo tmp = new Nodo ("boolean");
tmp.setNumNodo(parser.contador++);
tmp.setValor(f.toString());
RESULT = tmp;
:}
;

elseif_else ::= ELSIF:elif condicion_if:cond_elif THEN:then cuerpo:c elseif_else:elif_else
{:
System.out.println("entra elsif");
Nodo elsif = new Nodo ("elsif-then");
elsif.setNumNodo(parser.contador++);
elsif.addHijo((Nodo) cond_elif);
elsif.addHijo((Nodo) c);
elsif.addHijo((Nodo) elif_else);
RESULT = elsif;
:}
|
ELSE:else1 cuerpo:c END:end_if IF:if2 SEMICOLON:semi
{:
System.out.println("entra if con else");
Nodo hijoElse = new Nodo ("else");
hijoElse.setNumNodo(parser.contador++);
hijoElse.addHijo((Nodo) c);
RESULT = hijoElse;
:}
;



bloque_if ::= IF:i condicion_if:cond_if THEN:then cuerpo:c elseif_else:el_if
{:
System.out.println("entra if elsif");
Nodo hijoIf = new Nodo ("if-then");
hijoIf.setNumNodo(parser.contador++);
hijoIf.addHijo((Nodo) cond_if);
hijoIf.addHijo((Nodo) c);
hijoIf.addHijo((Nodo) el_if);
RESULT = hijoIf;
:}
|
IF:i condicion_if:cond_if THEN:then cuerpo:c END:end_if IF:if1 SEMICOLON:semi
{:
System.out.println("entra if elsif");
Nodo hijoIf = new Nodo ("if-then");
hijoIf.setNumNodo(parser.contador++);
hijoIf.addHijo((Nodo) cond_if);
hijoIf.addHijo((Nodo) c);
RESULT = hijoIf;
:}
;

put_function ::= PUT:p PARIZQ:par_izquierdo STRING:cadena PARDER:par_derecho SEMICOLON:semi
{:
Nodo nodoPut = new Nodo ("put");
nodoPut.setNumNodo(parser.contador++);
nodoPut.setValor(cadena.toString().substring(1, cadena.toString().length() - 1));
RESULT = nodoPut;
:}
|
PUT:p PARIZQ:par_izquierdo valores_numericos_booleanos:valNumBool PARDER:par_derecho SEMICOLON:semi
{:
Nodo nodoPut = new Nodo ("put");
nodoPut.setNumNodo(parser.contador++);
Nodo tmp2 = (Nodo) valNumBool;
nodoPut.setValor(tmp2.getValor());
RESULT = nodoPut;
:}
|
PUT:p PARIZQ:par_izquierdo llamado_funcion:llamadoF PARDER:par_derecho SEMICOLON:semi
{:
Nodo nodoPut = new Nodo("put");
nodoPut.setNumNodo(parser.contador++);
Nodo tmp2 = (Nodo) llamadoF;
nodoPut.setValor(tmp2.getValor());
RESULT = nodoPut;
:}
;

llamado_funcion ::= ID:id PARIZQ:par_izq repeticion_parametros:rep_param PARDER:par_der
{:
Nodo tmp = new Nodo ("llamado_funcion");
tmp.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo ("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
tmp.addHijo((Nodo) hijoId);
tmp.addHijo((Nodo) rep_param);
RESULT = tmp;
:}
;

repeticion_parametros ::= valores_funcion:vf COMA:c repeticion_parametros:repParam
{:
Nodo tmp = new Nodo (",");
tmp.setNumNodo(parser.contador++);
tmp.addHijo((Nodo) vf);
tmp.addHijo((Nodo) repParam);
RESULT = tmp;
:}
|
valores_funcion:vf
{:
Nodo tmp = new Nodo ();
tmp = (Nodo) vf;
RESULT = tmp;
:}
;

valores_funcion ::= NUMINT:num
{:
Nodo tmp = new Nodo("num_int");
tmp.setValor(num.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
ID:id
{:
Nodo tmp = new Nodo("id");
tmp.setValor(id.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
NUMFLOAT:nfloat
{:
Nodo tmp = new Nodo("num_float");
tmp.setValor(nfloat.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
TRUE:t
{:
Nodo tmp = new Nodo("boolean");
tmp.setValor(t.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
|
FALSE:f
{:
Nodo tmp = new Nodo("boolean");
tmp.setValor(f.toString());
tmp.setNumNodo(parser.contador++);
RESULT = tmp;
:}
;

get_function ::= GET:g PARIZQ:par_izquierdo ID:id PARDER:par_derecho SEMICOLON:semi
{:
Nodo nodoGet = new Nodo("get");
nodoGet.setNumNodo(parser.contador++);
nodoGet.setValor(id.toString());
RESULT = nodoGet;
:}
;

for_loop ::= FOR:f ID:id IN:i operando1:op1 DOSPUNTOS:puntos operando1:op1_2 LOOP:lp1 cuerpo:c END:e LOOP:lp2 SEMICOLON:semi
{:
Nodo nodoFor = new Nodo ("for");
nodoFor.setNumNodo(parser.contador++);
Nodo hijoId = new Nodo("id");
hijoId.setNumNodo(parser.contador++);
hijoId.setValor(id.toString());
nodoFor.addHijo((Nodo) hijoId);
nodoFor.addHijo((Nodo) op1);
nodoFor.addHijo((Nodo) op1_2);
nodoFor.addHijo((Nodo) c);
RESULT = nodoFor;
:}
;

while_loop ::= WHILE:wh condicion_if:cond_while LOOP:lp cuerpo:c END:e LOOP:lp1 SEMICOLON:semi
{:
System.out.println(wh.toString() + lp.toString() + e.toString() + lp1.toString() + semi.toString());
Nodo nodoWhile = new Nodo("while");
nodoWhile.setNumNodo(parser.contador++);
nodoWhile.addHijo((Nodo) cond_while);
nodoWhile.addHijo((Nodo) c);
RESULT = nodoWhile;
:}
;

loop_func ::= LOOP:lp cuerpo:c END:e LOOP:lp_final SEMICOLON:semi
{:
System.out.println(lp.toString() + e.toString());
Nodo nodoLoop = new Nodo ("loop");
nodoLoop.setNumNodo(parser.contador++);
nodoLoop.addHijo((Nodo) c);
RESULT = nodoLoop;
:}
;

exit_when ::= EXIT:ex WHEN:wh condicion_if:condicion_loop SEMICOLON:semi
{:
Nodo exitwhen = new Nodo ("exit-when");
exitwhen.setNumNodo(parser.contador++);
exitwhen.addHijo((Nodo) condicion_loop);
RESULT = exitwhen;
:}
;